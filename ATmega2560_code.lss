
ATmega2560_code.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000ed0  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000001d  00800200  00800200  00000f44  2**0
                  ALLOC
  2 .debug_aranges 00000020  00000000  00000000  00000f44  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000246  00000000  00000000  00000f64  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000730  00000000  00000000  000011aa  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000217  00000000  00000000  000018da  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000078e  00000000  00000000  00001af1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000001d0  00000000  00000000  00002280  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000227  00000000  00000000  00002450  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000260  00000000  00000000  00002677  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 72 00 	jmp	0xe4	; 0xe4 <__ctors_end>
   4:	0c 94 03 03 	jmp	0x606	; 0x606 <__vector_1>
   8:	0c 94 3d 01 	jmp	0x27a	; 0x27a <__vector_2>
   c:	0c 94 63 01 	jmp	0x2c6	; 0x2c6 <__vector_3>
  10:	0c 94 dd 04 	jmp	0x9ba	; 0x9ba <__vector_4>
  14:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <__vector_5>
  18:	0c 94 e7 03 	jmp	0x7ce	; 0x7ce <__vector_6>
  1c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  20:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  24:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  28:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  2c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  30:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  34:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  38:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  3c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  40:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  44:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  48:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  4c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  50:	0c 94 7e 01 	jmp	0x2fc	; 0x2fc <__vector_20>
  54:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  58:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  5c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  60:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  64:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <__vector_25>
  68:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  6c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  70:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  74:	0c 94 f8 00 	jmp	0x1f0	; 0x1f0 <__vector_29>
  78:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  7c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  80:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  84:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  88:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  8c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  90:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  94:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  98:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  9c:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  a8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  ac:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  b8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  bc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  c8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  cc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d4:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  d8:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  dc:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>
  e0:	0c 94 93 00 	jmp	0x126	; 0x126 <__bad_interrupt>

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_copy_data>:
  f4:	12 e0       	ldi	r17, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	e0 ed       	ldi	r30, 0xD0	; 208
  fc:	fe e0       	ldi	r31, 0x0E	; 14
  fe:	00 e0       	ldi	r16, 0x00	; 0
 100:	0b bf       	out	0x3b, r16	; 59
 102:	02 c0       	rjmp	.+4      	; 0x108 <__do_copy_data+0x14>
 104:	07 90       	elpm	r0, Z+
 106:	0d 92       	st	X+, r0
 108:	a0 30       	cpi	r26, 0x00	; 0
 10a:	b1 07       	cpc	r27, r17
 10c:	d9 f7       	brne	.-10     	; 0x104 <__do_copy_data+0x10>

0000010e <__do_clear_bss>:
 10e:	12 e0       	ldi	r17, 0x02	; 2
 110:	a0 e0       	ldi	r26, 0x00	; 0
 112:	b2 e0       	ldi	r27, 0x02	; 2
 114:	01 c0       	rjmp	.+2      	; 0x118 <.do_clear_bss_start>

00000116 <.do_clear_bss_loop>:
 116:	1d 92       	st	X+, r1

00000118 <.do_clear_bss_start>:
 118:	ad 31       	cpi	r26, 0x1D	; 29
 11a:	b1 07       	cpc	r27, r17
 11c:	e1 f7       	brne	.-8      	; 0x116 <.do_clear_bss_loop>
 11e:	0e 94 2b 03 	call	0x656	; 0x656 <main>
 122:	0c 94 66 07 	jmp	0xecc	; 0xecc <_exit>

00000126 <__bad_interrupt>:
 126:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000012a <PORT_Init>:
void stopcar(void);

void PORT_Init(void)
{
  /* PA0,PA1,PA2,PA3 output high */
  DDRA=0x0F; 
 12a:	8f e0       	ldi	r24, 0x0F	; 15
 12c:	81 b9       	out	0x01, r24	; 1
  PORTA=0x0F;
 12e:	82 b9       	out	0x02, r24	; 2
  /* PD0(INT0),PD1(INT1),PD2(INT2) input(pull-up)
   PD3(INT3) input(no pull-up) */
  DDRD=0x00;
 130:	1a b8       	out	0x0a, r1	; 10
  PORTD=0x07;
 132:	87 e0       	ldi	r24, 0x07	; 7
 134:	8b b9       	out	0x0b, r24	; 11
  //PE4(INT4),PE5(INT5) input(no pull-up)
  DDRE=0x00;
 136:	1d b8       	out	0x0d, r1	; 13
  PORTE=0x00;
 138:	1e b8       	out	0x0e, r1	; 14
  // PH3(OC4A),PH4(OC4B) output high
  DDRH=0x18;
 13a:	88 e1       	ldi	r24, 0x18	; 24
 13c:	80 93 01 01 	sts	0x0101, r24
  PORTH=0x18;
 140:	80 93 02 01 	sts	0x0102, r24
}
 144:	08 95       	ret

00000146 <USART_Init>:
void USART_Init(unsigned int ubrr)
{
  /* Set baud rate */
	UBRR0H=(unsigned char)(ubrr>>8);
 146:	90 93 c5 00 	sts	0x00C5, r25
	UBRR0L=(unsigned char)ubrr;
 14a:	80 93 c4 00 	sts	0x00C4, r24
  /* Enable RX complete Interrupt, Enable receiver and transmitter */
	UCSR0B=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 14e:	88 e9       	ldi	r24, 0x98	; 152
 150:	80 93 c1 00 	sts	0x00C1, r24
  /* Sychronous USART; Set frame format:8 data,2 stop bits */
	UCSR0C=(1<<UMSEL00)|(1<<USBS0)|(3<<UCSZ00);
 154:	8e e4       	ldi	r24, 0x4E	; 78
 156:	80 93 c2 00 	sts	0x00C2, r24
}
 15a:	08 95       	ret

0000015c <INT_Init>:
	   falling edge of INT1, 
	   rising edge of INT2, 
	   rising edge of INT3,
	   rising edge of INT5,
	   rising edge of INT6 */
  EICRA|=(1<<ISC01)|(1<<ISC11)|(1<<ISC21)|(1<<ISC20)|(1<<ISC31)|(1<<ISC30);  
 15c:	e9 e6       	ldi	r30, 0x69	; 105
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	80 81       	ld	r24, Z
 162:	8a 6f       	ori	r24, 0xFA	; 250
 164:	80 83       	st	Z, r24
  EICRB|=(1<<ISC61)|(1<<ISC60)|(1<<ISC51)|(1<<ISC50);
 166:	ea e6       	ldi	r30, 0x6A	; 106
 168:	f0 e0       	ldi	r31, 0x00	; 0
 16a:	80 81       	ld	r24, Z
 16c:	8c 63       	ori	r24, 0x3C	; 60
 16e:	80 83       	st	Z, r24
  //external interrupt 0,1,2,3,5,6 request enable
  EIMSK|=(1<<INT0)|(1<<INT1)|(1<<INT2)|(1<<INT3)|(1<<INT5)|(1<<INT6); 
 170:	8d b3       	in	r24, 0x1d	; 29
 172:	8f 66       	ori	r24, 0x6F	; 111
 174:	8d bb       	out	0x1d, r24	; 29
  // clear external interrupt 0,1,2,3,5,6 flag 
  EIFR|=(1<<INTF0)|(1<<INTF1)|(1<<INTF2)|(1<<INTF3)|(1<<INTF5)|(1<<INTF6); 
 176:	8c b3       	in	r24, 0x1c	; 28
 178:	8f 66       	ori	r24, 0x6F	; 111
 17a:	8c bb       	out	0x1c, r24	; 28
}
 17c:	08 95       	ret

0000017e <TIMER1_Init>:
void TIMER1_Init(void)
{
  TCCR1A=0x00;
 17e:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=(1<<CS12);  // prescaler :clk/256  i.e. 62500Hz
 182:	84 e0       	ldi	r24, 0x04	; 4
 184:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0x85EE;   // timer: 0.5s
 188:	8e ee       	ldi	r24, 0xEE	; 238
 18a:	95 e8       	ldi	r25, 0x85	; 133
 18c:	90 93 85 00 	sts	0x0085, r25
 190:	80 93 84 00 	sts	0x0084, r24
  TIMSK1=(1<<TOIE1);  //overflow interrupt enable
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	80 93 6f 00 	sts	0x006F, r24
  TIFR1=(1<<TOV1);  //clear the timer 1 overflow flag
 19a:	86 bb       	out	0x16, r24	; 22
}
 19c:	08 95       	ret

0000019e <TIMER3_Init>:
void TIMER3_Init(void)
{
  /*no prescaling */
  TCCR3A=0x00;
 19e:	10 92 90 00 	sts	0x0090, r1
  TCCR3B=(1<<CS30);
 1a2:	81 e0       	ldi	r24, 0x01	; 1
 1a4:	80 93 91 00 	sts	0x0091, r24
  TCNT3=0x00;
 1a8:	10 92 95 00 	sts	0x0095, r1
 1ac:	10 92 94 00 	sts	0x0094, r1
}
 1b0:	08 95       	ret

000001b2 <ADC_Init>:
void ADC_Init(void)
{
  ADMUX=(1<<REFS1); // use internal 1.1V voltage reference
 1b2:	80 e8       	ldi	r24, 0x80	; 128
 1b4:	80 93 7c 00 	sts	0x007C, r24
                    // select ADC0 as the input battery voltage pin 
  /* ADC Enable, ADC Start Conversion, ADC Auto Trigger Enable
  ADC Interrupt Enable, Divison factor=32 */
  ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|5; 
 1b8:	8d ee       	ldi	r24, 0xED	; 237
 1ba:	80 93 7a 00 	sts	0x007A, r24
}
 1be:	08 95       	ret

000001c0 <USART_Transmit>:
   controlmove();
  }
  return 0;
}
void USART_Transmit(unsigned char data)
{
 1c0:	98 2f       	mov	r25, r24
  /* wait for empty transmit buffer */
  while (!(UCSR0A & (1<<UDRE0)));
 1c2:	80 91 c0 00 	lds	r24, 0x00C0
 1c6:	85 ff       	sbrs	r24, 5
 1c8:	fc cf       	rjmp	.-8      	; 0x1c2 <USART_Transmit+0x2>
  /* Put data into buffer, sends the data */
  UDR0=data;
 1ca:	90 93 c6 00 	sts	0x00C6, r25
}
 1ce:	08 95       	ret

000001d0 <__vector_25>:
  return UDR0;
}
*/

ISR(USART0_RX_vect)
{
 1d0:	1f 92       	push	r1
 1d2:	0f 92       	push	r0
 1d4:	0f b6       	in	r0, 0x3f	; 63
 1d6:	0f 92       	push	r0
 1d8:	11 24       	eor	r1, r1
 1da:	8f 93       	push	r24
  indata=UDR0;   // The received data is store in variable indata 
 1dc:	80 91 c6 00 	lds	r24, 0x00C6
 1e0:	80 93 12 02 	sts	0x0212, r24
}
 1e4:	8f 91       	pop	r24
 1e6:	0f 90       	pop	r0
 1e8:	0f be       	out	0x3f, r0	; 63
 1ea:	0f 90       	pop	r0
 1ec:	1f 90       	pop	r1
 1ee:	18 95       	reti

000001f0 <__vector_29>:

ISR(ADC_vect)
{
 1f0:	1f 92       	push	r1
 1f2:	0f 92       	push	r0
 1f4:	0f b6       	in	r0, 0x3f	; 63
 1f6:	0f 92       	push	r0
 1f8:	0b b6       	in	r0, 0x3b	; 59
 1fa:	0f 92       	push	r0
 1fc:	11 24       	eor	r1, r1
 1fe:	2f 93       	push	r18
 200:	3f 93       	push	r19
 202:	4f 93       	push	r20
 204:	5f 93       	push	r21
 206:	6f 93       	push	r22
 208:	7f 93       	push	r23
 20a:	8f 93       	push	r24
 20c:	9f 93       	push	r25
 20e:	af 93       	push	r26
 210:	bf 93       	push	r27
 212:	ef 93       	push	r30
 214:	ff 93       	push	r31
  unsigned char adc_data;
  adc_data=ADC>>2;  //read 8 bit value
 216:	60 91 78 00 	lds	r22, 0x0078
 21a:	70 91 79 00 	lds	r23, 0x0079
  batteryvoltage=1.1*255/adc_data;
 21e:	76 95       	lsr	r23
 220:	67 95       	ror	r22
 222:	76 95       	lsr	r23
 224:	67 95       	ror	r22
 226:	70 e0       	ldi	r23, 0x00	; 0
 228:	88 27       	eor	r24, r24
 22a:	77 fd       	sbrc	r23, 7
 22c:	80 95       	com	r24
 22e:	98 2f       	mov	r25, r24
 230:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__floatsisf>
 234:	9b 01       	movw	r18, r22
 236:	ac 01       	movw	r20, r24
 238:	60 e0       	ldi	r22, 0x00	; 0
 23a:	70 e4       	ldi	r23, 0x40	; 64
 23c:	8c e8       	ldi	r24, 0x8C	; 140
 23e:	93 e4       	ldi	r25, 0x43	; 67
 240:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divsf3>
 244:	60 93 0e 02 	sts	0x020E, r22
 248:	70 93 0f 02 	sts	0x020F, r23
 24c:	80 93 10 02 	sts	0x0210, r24
 250:	90 93 11 02 	sts	0x0211, r25
}
 254:	ff 91       	pop	r31
 256:	ef 91       	pop	r30
 258:	bf 91       	pop	r27
 25a:	af 91       	pop	r26
 25c:	9f 91       	pop	r25
 25e:	8f 91       	pop	r24
 260:	7f 91       	pop	r23
 262:	6f 91       	pop	r22
 264:	5f 91       	pop	r21
 266:	4f 91       	pop	r20
 268:	3f 91       	pop	r19
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0b be       	out	0x3b, r0	; 59
 270:	0f 90       	pop	r0
 272:	0f be       	out	0x3f, r0	; 63
 274:	0f 90       	pop	r0
 276:	1f 90       	pop	r1
 278:	18 95       	reti

0000027a <__vector_2>:
ISR(INT0_vect)
{
  stopcar();
}
ISR(INT1_vect)
{
 27a:	1f 92       	push	r1
 27c:	0f 92       	push	r0
 27e:	0f b6       	in	r0, 0x3f	; 63
 280:	0f 92       	push	r0
 282:	11 24       	eor	r1, r1
 284:	8f 93       	push	r24
 286:	9f 93       	push	r25
	pulsenumber++;
 288:	80 91 04 02 	lds	r24, 0x0204
 28c:	90 91 05 02 	lds	r25, 0x0205
 290:	01 96       	adiw	r24, 0x01	; 1
 292:	90 93 05 02 	sts	0x0205, r25
 296:	80 93 04 02 	sts	0x0204, r24
	if (!bit_is_clear(PIND,PD1))
 29a:	49 9b       	sbis	0x09, 1	; 9
 29c:	06 c0       	rjmp	.+12     	; 0x2aa <__vector_2+0x30>
  return 0;
}
void USART_Transmit(unsigned char data)
{
  /* wait for empty transmit buffer */
  while (!(UCSR0A & (1<<UDRE0)));
 29e:	80 91 c0 00 	lds	r24, 0x00C0
 2a2:	85 ff       	sbrs	r24, 5
 2a4:	fc cf       	rjmp	.-8      	; 0x29e <__vector_2+0x24>
  /* Put data into buffer, sends the data */
  UDR0=data;
 2a6:	8b e2       	ldi	r24, 0x2B	; 43
 2a8:	05 c0       	rjmp	.+10     	; 0x2b4 <__vector_2+0x3a>
  return 0;
}
void USART_Transmit(unsigned char data)
{
  /* wait for empty transmit buffer */
  while (!(UCSR0A & (1<<UDRE0)));
 2aa:	80 91 c0 00 	lds	r24, 0x00C0
 2ae:	85 ff       	sbrs	r24, 5
 2b0:	fc cf       	rjmp	.-8      	; 0x2aa <__vector_2+0x30>
  /* Put data into buffer, sends the data */
  UDR0=data;
 2b2:	8d e2       	ldi	r24, 0x2D	; 45
 2b4:	80 93 c6 00 	sts	0x00C6, r24
	}
	else
	{
		USART_Transmit('-');  // The motor is rotating backward
	}
}
 2b8:	9f 91       	pop	r25
 2ba:	8f 91       	pop	r24
 2bc:	0f 90       	pop	r0
 2be:	0f be       	out	0x3f, r0	; 63
 2c0:	0f 90       	pop	r0
 2c2:	1f 90       	pop	r1
 2c4:	18 95       	reti

000002c6 <__vector_3>:
ISR(INT2_vect)
{
 2c6:	1f 92       	push	r1
 2c8:	0f 92       	push	r0
 2ca:	0f b6       	in	r0, 0x3f	; 63
 2cc:	0f 92       	push	r0
 2ce:	11 24       	eor	r1, r1
 2d0:	8f 93       	push	r24
	if (!bit_is_clear(PIND,PD2))
 2d2:	4a 9b       	sbis	0x09, 2	; 9
 2d4:	06 c0       	rjmp	.+12     	; 0x2e2 <__vector_3+0x1c>
  return 0;
}
void USART_Transmit(unsigned char data)
{
  /* wait for empty transmit buffer */
  while (!(UCSR0A & (1<<UDRE0)));
 2d6:	80 91 c0 00 	lds	r24, 0x00C0
 2da:	85 ff       	sbrs	r24, 5
 2dc:	fc cf       	rjmp	.-8      	; 0x2d6 <__vector_3+0x10>
  /* Put data into buffer, sends the data */
  UDR0=data;
 2de:	8b e2       	ldi	r24, 0x2B	; 43
 2e0:	05 c0       	rjmp	.+10     	; 0x2ec <__vector_3+0x26>
  return 0;
}
void USART_Transmit(unsigned char data)
{
  /* wait for empty transmit buffer */
  while (!(UCSR0A & (1<<UDRE0)));
 2e2:	80 91 c0 00 	lds	r24, 0x00C0
 2e6:	85 ff       	sbrs	r24, 5
 2e8:	fc cf       	rjmp	.-8      	; 0x2e2 <__vector_3+0x1c>
  /* Put data into buffer, sends the data */
  UDR0=data;
 2ea:	8d e2       	ldi	r24, 0x2D	; 45
 2ec:	80 93 c6 00 	sts	0x00C6, r24
	}
	else
	{
		USART_Transmit('-');  // The motor is rotating backward
	}
}
 2f0:	8f 91       	pop	r24
 2f2:	0f 90       	pop	r0
 2f4:	0f be       	out	0x3f, r0	; 63
 2f6:	0f 90       	pop	r0
 2f8:	1f 90       	pop	r1
 2fa:	18 95       	reti

000002fc <__vector_20>:
  if(ch4<20&&ch4>-20)
     {ch4=0;}
  absch4=abs(ch4);
}
ISR(TIMER1_OVF_vect)
{
 2fc:	1f 92       	push	r1
 2fe:	0f 92       	push	r0
 300:	0f b6       	in	r0, 0x3f	; 63
 302:	0f 92       	push	r0
 304:	0b b6       	in	r0, 0x3b	; 59
 306:	0f 92       	push	r0
 308:	11 24       	eor	r1, r1
 30a:	2f 93       	push	r18
 30c:	3f 93       	push	r19
 30e:	4f 93       	push	r20
 310:	5f 93       	push	r21
 312:	6f 93       	push	r22
 314:	7f 93       	push	r23
 316:	8f 93       	push	r24
 318:	9f 93       	push	r25
 31a:	af 93       	push	r26
 31c:	bf 93       	push	r27
 31e:	ef 93       	push	r30
 320:	ff 93       	push	r31
  // Timer 1 :0.5 s ----> overflow
  freq=2*pulsenumber; //calculate the pulse freqency
 322:	60 91 04 02 	lds	r22, 0x0204
 326:	70 91 05 02 	lds	r23, 0x0205
 32a:	66 0f       	add	r22, r22
 32c:	77 1f       	adc	r23, r23
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	60 93 00 02 	sts	0x0200, r22
 336:	70 93 01 02 	sts	0x0201, r23
 33a:	80 93 02 02 	sts	0x0202, r24
 33e:	90 93 03 02 	sts	0x0203, r25
  TCNT1=0x85EE;
 342:	2e ee       	ldi	r18, 0xEE	; 238
 344:	35 e8       	ldi	r19, 0x85	; 133
 346:	30 93 85 00 	sts	0x0085, r19
 34a:	20 93 84 00 	sts	0x0084, r18
  pulsenumber=0;
 34e:	10 92 05 02 	sts	0x0205, r1
 352:	10 92 04 02 	sts	0x0204, r1
  speed=freq*n; // transform the pulse frequency into the motor's speed
 356:	20 91 06 02 	lds	r18, 0x0206
 35a:	30 91 07 02 	lds	r19, 0x0207
 35e:	40 e0       	ldi	r20, 0x00	; 0
 360:	50 e0       	ldi	r21, 0x00	; 0
 362:	0e 94 47 07 	call	0xe8e	; 0xe8e <__mulsi3>
 366:	0e 94 56 06 	call	0xcac	; 0xcac <__floatunsisf>
 36a:	60 93 15 02 	sts	0x0215, r22
 36e:	70 93 16 02 	sts	0x0216, r23
 372:	80 93 17 02 	sts	0x0217, r24
 376:	90 93 18 02 	sts	0x0218, r25
                // and n is the scale which is to be determined by the encoder
}
 37a:	ff 91       	pop	r31
 37c:	ef 91       	pop	r30
 37e:	bf 91       	pop	r27
 380:	af 91       	pop	r26
 382:	9f 91       	pop	r25
 384:	8f 91       	pop	r24
 386:	7f 91       	pop	r23
 388:	6f 91       	pop	r22
 38a:	5f 91       	pop	r21
 38c:	4f 91       	pop	r20
 38e:	3f 91       	pop	r19
 390:	2f 91       	pop	r18
 392:	0f 90       	pop	r0
 394:	0b be       	out	0x3b, r0	; 59
 396:	0f 90       	pop	r0
 398:	0f be       	out	0x3f, r0	; 63
 39a:	0f 90       	pop	r0
 39c:	1f 90       	pop	r1
 39e:	18 95       	reti

000003a0 <left_pwm_output>:
void left_pwm_output(int x)
{
  // x should be between 0 and 255
  /*fast pwm,8-bit, top value is 0x00FF*/
  TCCR4A=(1<<COM4A1)|(1<<WGM40);  
 3a0:	91 e8       	ldi	r25, 0x81	; 129
 3a2:	90 93 a0 00 	sts	0x00A0, r25
  TCCR4B=(1<<WGM42)|(1<<CS40);
 3a6:	99 e0       	ldi	r25, 0x09	; 9
 3a8:	90 93 a1 00 	sts	0x00A1, r25
  TCNT4=0x0000;
 3ac:	10 92 a5 00 	sts	0x00A5, r1
 3b0:	10 92 a4 00 	sts	0x00A4, r1
  OCR4AL=x;  
 3b4:	80 93 a8 00 	sts	0x00A8, r24
}
 3b8:	08 95       	ret

000003ba <right_pwm_output>:
void right_pwm_output(int x)
{
  // x should be between 0 and 255
  /*fast pwm,8-bit */
  TCCR4A=(1<<COM4A1)|(1<<WGM40);  
 3ba:	91 e8       	ldi	r25, 0x81	; 129
 3bc:	90 93 a0 00 	sts	0x00A0, r25
  TCCR4B=(1<<WGM42)|(1<<CS40);
 3c0:	99 e0       	ldi	r25, 0x09	; 9
 3c2:	90 93 a1 00 	sts	0x00A1, r25
  TCNT4=0x0000;
 3c6:	10 92 a5 00 	sts	0x00A5, r1
 3ca:	10 92 a4 00 	sts	0x00A4, r1
  OCR4BL=x;  
 3ce:	80 93 aa 00 	sts	0x00AA, r24
}
 3d2:	08 95       	ret

000003d4 <forward_turnleft>:
}
void left_pwm_output(int x)
{
  // x should be between 0 and 255
  /*fast pwm,8-bit, top value is 0x00FF*/
  TCCR4A=(1<<COM4A1)|(1<<WGM40);  
 3d4:	31 e8       	ldi	r19, 0x81	; 129
 3d6:	30 93 a0 00 	sts	0x00A0, r19
  TCCR4B=(1<<WGM42)|(1<<CS40);
 3da:	29 e0       	ldi	r18, 0x09	; 9
 3dc:	20 93 a1 00 	sts	0x00A1, r18
  TCNT4=0x0000;
 3e0:	10 92 a5 00 	sts	0x00A5, r1
 3e4:	10 92 a4 00 	sts	0x00A4, r1
  OCR4AL=x;  
 3e8:	80 55       	subi	r24, 0x50	; 80
 3ea:	90 40       	sbci	r25, 0x00	; 0
 3ec:	80 93 a8 00 	sts	0x00A8, r24
 3f0:	80 5b       	subi	r24, 0xB0	; 176
 3f2:	9f 4f       	sbci	r25, 0xFF	; 255
}
void right_pwm_output(int x)
{
  // x should be between 0 and 255
  /*fast pwm,8-bit */
  TCCR4A=(1<<COM4A1)|(1<<WGM40);  
 3f4:	30 93 a0 00 	sts	0x00A0, r19
  TCCR4B=(1<<WGM42)|(1<<CS40);
 3f8:	20 93 a1 00 	sts	0x00A1, r18
  TCNT4=0x0000;
 3fc:	10 92 a5 00 	sts	0x00A5, r1
 400:	10 92 a4 00 	sts	0x00A4, r1
  OCR4BL=x;  
 404:	84 36       	cpi	r24, 0x64	; 100
 406:	91 05       	cpc	r25, r1
 408:	14 f4       	brge	.+4      	; 0x40e <forward_turnleft+0x3a>
 40a:	84 e6       	ldi	r24, 0x64	; 100
 40c:	90 e0       	ldi	r25, 0x00	; 0
 40e:	80 93 aa 00 	sts	0x00AA, r24
    a=100;
  }
  b=x-80;
  left_pwm_output(b);
  right_pwm_output(a);
  PORTA=0x05;   // digital pin 22,23,24,25 on arduino mega 2560
 412:	85 e0       	ldi	r24, 0x05	; 5
 414:	82 b9       	out	0x02, r24	; 2
                // left and right motors both rotate forward, but 
                // right motor has higher speed
}
 416:	08 95       	ret

00000418 <forward_turnright>:
void forward_turnright(int x)
{
 418:	9c 01       	movw	r18, r24
}
void left_pwm_output(int x)
{
  // x should be between 0 and 255
  /*fast pwm,8-bit, top value is 0x00FF*/
  TCCR4A=(1<<COM4A1)|(1<<WGM40);  
 41a:	81 e8       	ldi	r24, 0x81	; 129
 41c:	80 93 a0 00 	sts	0x00A0, r24
  TCCR4B=(1<<WGM42)|(1<<CS40);
 420:	89 e0       	ldi	r24, 0x09	; 9
 422:	80 93 a1 00 	sts	0x00A1, r24
  TCNT4=0x0000;
 426:	10 92 a5 00 	sts	0x00A5, r1
 42a:	10 92 a4 00 	sts	0x00A4, r1
  OCR4AL=x;  
 42e:	c9 01       	movw	r24, r18
 430:	24 36       	cpi	r18, 0x64	; 100
 432:	31 05       	cpc	r19, r1
 434:	14 f4       	brge	.+4      	; 0x43a <forward_turnright+0x22>
 436:	84 e6       	ldi	r24, 0x64	; 100
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	80 93 a8 00 	sts	0x00A8, r24
}
void right_pwm_output(int x)
{
  // x should be between 0 and 255
  /*fast pwm,8-bit */
  TCCR4A=(1<<COM4A1)|(1<<WGM40);  
 43e:	81 e8       	ldi	r24, 0x81	; 129
 440:	80 93 a0 00 	sts	0x00A0, r24
  TCCR4B=(1<<WGM42)|(1<<CS40);
 444:	89 e0       	ldi	r24, 0x09	; 9
 446:	80 93 a1 00 	sts	0x00A1, r24
  TCNT4=0x0000;
 44a:	10 92 a5 00 	sts	0x00A5, r1
 44e:	10 92 a4 00 	sts	0x00A4, r1
  OCR4BL=x;  
 452:	20 55       	subi	r18, 0x50	; 80
 454:	30 40       	sbci	r19, 0x00	; 0
 456:	20 93 aa 00 	sts	0x00AA, r18
    a=100;
  }
  b=x-80;
  left_pwm_output(a);
  right_pwm_output(b);
  PORTA=0x05;   // left and right motors both rotate forward, but 
 45a:	85 e0       	ldi	r24, 0x05	; 5
 45c:	82 b9       	out	0x02, r24	; 2
                // left motor has higher speed
}
 45e:	08 95       	ret

00000460 <standing_turnright>:
void standing_turnright(int x)
{
 460:	cf 93       	push	r28
 462:	df 93       	push	r29
}
void left_pwm_output(int x)
{
  // x should be between 0 and 255
  /*fast pwm,8-bit, top value is 0x00FF*/
  TCCR4A=(1<<COM4A1)|(1<<WGM40);  
 464:	20 ea       	ldi	r18, 0xA0	; 160
 466:	30 e0       	ldi	r19, 0x00	; 0
 468:	41 e8       	ldi	r20, 0x81	; 129
 46a:	e9 01       	movw	r28, r18
 46c:	48 83       	st	Y, r20
  TCCR4B=(1<<WGM42)|(1<<CS40);
 46e:	a1 ea       	ldi	r26, 0xA1	; 161
 470:	b0 e0       	ldi	r27, 0x00	; 0
 472:	99 e0       	ldi	r25, 0x09	; 9
 474:	9c 93       	st	X, r25
  TCNT4=0x0000;
 476:	e4 ea       	ldi	r30, 0xA4	; 164
 478:	f0 e0       	ldi	r31, 0x00	; 0
 47a:	11 82       	std	Z+1, r1	; 0x01
 47c:	10 82       	st	Z, r1
  OCR4AL=x;  
 47e:	80 93 a8 00 	sts	0x00A8, r24
}
void right_pwm_output(int x)
{
  // x should be between 0 and 255
  /*fast pwm,8-bit */
  TCCR4A=(1<<COM4A1)|(1<<WGM40);  
 482:	48 83       	st	Y, r20
  TCCR4B=(1<<WGM42)|(1<<CS40);
 484:	9c 93       	st	X, r25
  TCNT4=0x0000;
 486:	11 82       	std	Z+1, r1	; 0x01
 488:	10 82       	st	Z, r1
  OCR4BL=x;  
 48a:	80 93 aa 00 	sts	0x00AA, r24
}
void standing_turnright(int x)
{
  left_pwm_output(x);
  right_pwm_output(x);
  PORTA=0x09; // left motor rotates forward, right motor rotates backward
 48e:	92 b9       	out	0x02, r25	; 2
}
 490:	df 91       	pop	r29
 492:	cf 91       	pop	r28
 494:	08 95       	ret

00000496 <standing_turnleft>:
void standing_turnleft(int x)
{
 496:	cf 93       	push	r28
 498:	df 93       	push	r29
}
void left_pwm_output(int x)
{
  // x should be between 0 and 255
  /*fast pwm,8-bit, top value is 0x00FF*/
  TCCR4A=(1<<COM4A1)|(1<<WGM40);  
 49a:	20 ea       	ldi	r18, 0xA0	; 160
 49c:	30 e0       	ldi	r19, 0x00	; 0
 49e:	41 e8       	ldi	r20, 0x81	; 129
 4a0:	e9 01       	movw	r28, r18
 4a2:	48 83       	st	Y, r20
  TCCR4B=(1<<WGM42)|(1<<CS40);
 4a4:	a1 ea       	ldi	r26, 0xA1	; 161
 4a6:	b0 e0       	ldi	r27, 0x00	; 0
 4a8:	99 e0       	ldi	r25, 0x09	; 9
 4aa:	9c 93       	st	X, r25
  TCNT4=0x0000;
 4ac:	e4 ea       	ldi	r30, 0xA4	; 164
 4ae:	f0 e0       	ldi	r31, 0x00	; 0
 4b0:	11 82       	std	Z+1, r1	; 0x01
 4b2:	10 82       	st	Z, r1
  OCR4AL=x;  
 4b4:	80 93 a8 00 	sts	0x00A8, r24
}
void right_pwm_output(int x)
{
  // x should be between 0 and 255
  /*fast pwm,8-bit */
  TCCR4A=(1<<COM4A1)|(1<<WGM40);  
 4b8:	48 83       	st	Y, r20
  TCCR4B=(1<<WGM42)|(1<<CS40);
 4ba:	9c 93       	st	X, r25
  TCNT4=0x0000;
 4bc:	11 82       	std	Z+1, r1	; 0x01
 4be:	10 82       	st	Z, r1
  OCR4BL=x;  
 4c0:	80 93 aa 00 	sts	0x00AA, r24
}
void standing_turnleft(int x)
{
  left_pwm_output(x);
  right_pwm_output(x);
  PORTA=0x06; // left motor rotates backward, right motor rotates forward
 4c4:	86 e0       	ldi	r24, 0x06	; 6
 4c6:	82 b9       	out	0x02, r24	; 2
}
 4c8:	df 91       	pop	r29
 4ca:	cf 91       	pop	r28
 4cc:	08 95       	ret

000004ce <forward>:
void forward(int x)
{ 
 4ce:	cf 93       	push	r28
 4d0:	df 93       	push	r29
}
void left_pwm_output(int x)
{
  // x should be between 0 and 255
  /*fast pwm,8-bit, top value is 0x00FF*/
  TCCR4A=(1<<COM4A1)|(1<<WGM40);  
 4d2:	20 ea       	ldi	r18, 0xA0	; 160
 4d4:	30 e0       	ldi	r19, 0x00	; 0
 4d6:	41 e8       	ldi	r20, 0x81	; 129
 4d8:	e9 01       	movw	r28, r18
 4da:	48 83       	st	Y, r20
  TCCR4B=(1<<WGM42)|(1<<CS40);
 4dc:	a1 ea       	ldi	r26, 0xA1	; 161
 4de:	b0 e0       	ldi	r27, 0x00	; 0
 4e0:	99 e0       	ldi	r25, 0x09	; 9
 4e2:	9c 93       	st	X, r25
  TCNT4=0x0000;
 4e4:	e4 ea       	ldi	r30, 0xA4	; 164
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	11 82       	std	Z+1, r1	; 0x01
 4ea:	10 82       	st	Z, r1
  OCR4AL=x;  
 4ec:	80 93 a8 00 	sts	0x00A8, r24
}
void right_pwm_output(int x)
{
  // x should be between 0 and 255
  /*fast pwm,8-bit */
  TCCR4A=(1<<COM4A1)|(1<<WGM40);  
 4f0:	48 83       	st	Y, r20
  TCCR4B=(1<<WGM42)|(1<<CS40);
 4f2:	9c 93       	st	X, r25
  TCNT4=0x0000;
 4f4:	11 82       	std	Z+1, r1	; 0x01
 4f6:	10 82       	st	Z, r1
  OCR4BL=x;  
 4f8:	80 93 aa 00 	sts	0x00AA, r24
}
void forward(int x)
{ 
  left_pwm_output(x);
  right_pwm_output(x);
  PORTA=0x05;  // left and right motors rotate forward
 4fc:	85 e0       	ldi	r24, 0x05	; 5
 4fe:	82 b9       	out	0x02, r24	; 2
}
 500:	df 91       	pop	r29
 502:	cf 91       	pop	r28
 504:	08 95       	ret

00000506 <reverse>:
void reverse(int x)
{   
 506:	cf 93       	push	r28
 508:	df 93       	push	r29
}
void left_pwm_output(int x)
{
  // x should be between 0 and 255
  /*fast pwm,8-bit, top value is 0x00FF*/
  TCCR4A=(1<<COM4A1)|(1<<WGM40);  
 50a:	20 ea       	ldi	r18, 0xA0	; 160
 50c:	30 e0       	ldi	r19, 0x00	; 0
 50e:	41 e8       	ldi	r20, 0x81	; 129
 510:	e9 01       	movw	r28, r18
 512:	48 83       	st	Y, r20
  TCCR4B=(1<<WGM42)|(1<<CS40);
 514:	a1 ea       	ldi	r26, 0xA1	; 161
 516:	b0 e0       	ldi	r27, 0x00	; 0
 518:	99 e0       	ldi	r25, 0x09	; 9
 51a:	9c 93       	st	X, r25
  TCNT4=0x0000;
 51c:	e4 ea       	ldi	r30, 0xA4	; 164
 51e:	f0 e0       	ldi	r31, 0x00	; 0
 520:	11 82       	std	Z+1, r1	; 0x01
 522:	10 82       	st	Z, r1
  OCR4AL=x;  
 524:	80 93 a8 00 	sts	0x00A8, r24
}
void right_pwm_output(int x)
{
  // x should be between 0 and 255
  /*fast pwm,8-bit */
  TCCR4A=(1<<COM4A1)|(1<<WGM40);  
 528:	48 83       	st	Y, r20
  TCCR4B=(1<<WGM42)|(1<<CS40);
 52a:	9c 93       	st	X, r25
  TCNT4=0x0000;
 52c:	11 82       	std	Z+1, r1	; 0x01
 52e:	10 82       	st	Z, r1
  OCR4BL=x;  
 530:	80 93 aa 00 	sts	0x00AA, r24
}
void reverse(int x)
{   
  left_pwm_output(x);
  right_pwm_output(x);
  PORTA=0x0A;    // left and right motors rotate backward
 534:	8a e0       	ldi	r24, 0x0A	; 10
 536:	82 b9       	out	0x02, r24	; 2
}
 538:	df 91       	pop	r29
 53a:	cf 91       	pop	r28
 53c:	08 95       	ret

0000053e <stopcar>:
void stopcar(void)
{
  PORTA|=0x0F;
 53e:	82 b1       	in	r24, 0x02	; 2
 540:	8f 60       	ori	r24, 0x0F	; 15
 542:	82 b9       	out	0x02, r24	; 2
  sbi(PORTE,3);
 544:	73 9a       	sbi	0x0e, 3	; 14
  sbi(PORTH,3);
 546:	e2 e0       	ldi	r30, 0x02	; 2
 548:	f1 e0       	ldi	r31, 0x01	; 1
 54a:	80 81       	ld	r24, Z
 54c:	88 60       	ori	r24, 0x08	; 8
 54e:	80 83       	st	Z, r24
  TCCR3B&=0x00; //stop timer 3
 550:	e1 e9       	ldi	r30, 0x91	; 145
 552:	f0 e0       	ldi	r31, 0x00	; 0
 554:	80 81       	ld	r24, Z
 556:	10 82       	st	Z, r1
}
 558:	08 95       	ret

0000055a <controlmove>:
  TCNT4=0x0000;
  OCR4BL=x;  
}
void controlmove(void)
{
  if (ch1==0&&ch2==0&&ch4==0)
 55a:	80 91 1b 02 	lds	r24, 0x021B
 55e:	90 91 1c 02 	lds	r25, 0x021C
 562:	00 97       	sbiw	r24, 0x00	; 0
 564:	79 f4       	brne	.+30     	; 0x584 <controlmove+0x2a>
 566:	80 91 08 02 	lds	r24, 0x0208
 56a:	90 91 09 02 	lds	r25, 0x0209
 56e:	89 2b       	or	r24, r25
 570:	e1 f4       	brne	.+56     	; 0x5aa <controlmove+0x50>
 572:	80 91 0a 02 	lds	r24, 0x020A
 576:	90 91 0b 02 	lds	r25, 0x020B
 57a:	89 2b       	or	r24, r25
 57c:	b1 f4       	brne	.+44     	; 0x5aa <controlmove+0x50>
   {
      stopcar();
 57e:	0e 94 9f 02 	call	0x53e	; 0x53e <stopcar>
 582:	08 95       	ret
    }
 else
 {
   if (ch1>0)
 584:	18 16       	cp	r1, r24
 586:	19 06       	cpc	r1, r25
 588:	3c f4       	brge	.+14     	; 0x598 <controlmove+0x3e>
  {
    forward_turnleft(absch1);    
 58a:	80 91 19 02 	lds	r24, 0x0219
 58e:	90 91 1a 02 	lds	r25, 0x021A
 592:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <forward_turnleft>
 596:	08 95       	ret
  }
 else 
  {
    if (ch1<0)
 598:	89 2b       	or	r24, r25
 59a:	39 f0       	breq	.+14     	; 0x5aa <controlmove+0x50>
    {
      forward_turnright(absch1);
 59c:	80 91 19 02 	lds	r24, 0x0219
 5a0:	90 91 1a 02 	lds	r25, 0x021A
 5a4:	0e 94 0c 02 	call	0x418	; 0x418 <forward_turnright>
 5a8:	08 95       	ret
    }
    else
    {
      if (ch2>0)
 5aa:	80 91 08 02 	lds	r24, 0x0208
 5ae:	90 91 09 02 	lds	r25, 0x0209
 5b2:	18 16       	cp	r1, r24
 5b4:	19 06       	cpc	r1, r25
 5b6:	3c f4       	brge	.+14     	; 0x5c6 <controlmove+0x6c>
      {     
        forward(absch2);
 5b8:	80 91 13 02 	lds	r24, 0x0213
 5bc:	90 91 14 02 	lds	r25, 0x0214
 5c0:	0e 94 67 02 	call	0x4ce	; 0x4ce <forward>
 5c4:	08 95       	ret
      }
      else
      {
        if (ch2<0)
 5c6:	89 2b       	or	r24, r25
 5c8:	39 f0       	breq	.+14     	; 0x5d8 <controlmove+0x7e>
        {
          reverse(absch2);
 5ca:	80 91 13 02 	lds	r24, 0x0213
 5ce:	90 91 14 02 	lds	r25, 0x0214
 5d2:	0e 94 83 02 	call	0x506	; 0x506 <reverse>
 5d6:	08 95       	ret
        }
        else
        {
        	if (ch4>0)
 5d8:	80 91 0a 02 	lds	r24, 0x020A
 5dc:	90 91 0b 02 	lds	r25, 0x020B
 5e0:	18 16       	cp	r1, r24
 5e2:	19 06       	cpc	r1, r25
 5e4:	3c f4       	brge	.+14     	; 0x5f4 <controlmove+0x9a>
        	{
        	  standing_turnleft(absch4);
 5e6:	80 91 0c 02 	lds	r24, 0x020C
 5ea:	90 91 0d 02 	lds	r25, 0x020D
 5ee:	0e 94 4b 02 	call	0x496	; 0x496 <standing_turnleft>
 5f2:	08 95       	ret
        	}
        	else
        	{
        		if (ch4<0)
 5f4:	89 2b       	or	r24, r25
 5f6:	31 f0       	breq	.+12     	; 0x604 <controlmove+0xaa>
        		{
        			standing_turnright(absch4);
 5f8:	80 91 0c 02 	lds	r24, 0x020C
 5fc:	90 91 0d 02 	lds	r25, 0x020D
 600:	0e 94 30 02 	call	0x460	; 0x460 <standing_turnright>
 604:	08 95       	ret

00000606 <__vector_1>:
  unsigned char adc_data;
  adc_data=ADC>>2;  //read 8 bit value
  batteryvoltage=1.1*255/adc_data;
}
ISR(INT0_vect)
{
 606:	1f 92       	push	r1
 608:	0f 92       	push	r0
 60a:	0f b6       	in	r0, 0x3f	; 63
 60c:	0f 92       	push	r0
 60e:	0b b6       	in	r0, 0x3b	; 59
 610:	0f 92       	push	r0
 612:	11 24       	eor	r1, r1
 614:	2f 93       	push	r18
 616:	3f 93       	push	r19
 618:	4f 93       	push	r20
 61a:	5f 93       	push	r21
 61c:	6f 93       	push	r22
 61e:	7f 93       	push	r23
 620:	8f 93       	push	r24
 622:	9f 93       	push	r25
 624:	af 93       	push	r26
 626:	bf 93       	push	r27
 628:	ef 93       	push	r30
 62a:	ff 93       	push	r31
  stopcar();
 62c:	0e 94 9f 02 	call	0x53e	; 0x53e <stopcar>
}
 630:	ff 91       	pop	r31
 632:	ef 91       	pop	r30
 634:	bf 91       	pop	r27
 636:	af 91       	pop	r26
 638:	9f 91       	pop	r25
 63a:	8f 91       	pop	r24
 63c:	7f 91       	pop	r23
 63e:	6f 91       	pop	r22
 640:	5f 91       	pop	r21
 642:	4f 91       	pop	r20
 644:	3f 91       	pop	r19
 646:	2f 91       	pop	r18
 648:	0f 90       	pop	r0
 64a:	0b be       	out	0x3b, r0	; 59
 64c:	0f 90       	pop	r0
 64e:	0f be       	out	0x3f, r0	; 63
 650:	0f 90       	pop	r0
 652:	1f 90       	pop	r1
 654:	18 95       	reti

00000656 <main>:
}
int main(void)
{

  /* Initialization */
  PORT_Init();
 656:	0e 94 95 00 	call	0x12a	; 0x12a <PORT_Init>
  PORTH=0x18;
}
void USART_Init(unsigned int ubrr)
{
  /* Set baud rate */
	UBRR0H=(unsigned char)(ubrr>>8);
 65a:	10 92 c5 00 	sts	0x00C5, r1
	UBRR0L=(unsigned char)ubrr;
 65e:	8f ec       	ldi	r24, 0xCF	; 207
 660:	80 93 c4 00 	sts	0x00C4, r24
  /* Enable RX complete Interrupt, Enable receiver and transmitter */
	UCSR0B=(1<<RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
 664:	88 e9       	ldi	r24, 0x98	; 152
 666:	80 93 c1 00 	sts	0x00C1, r24
  /* Sychronous USART; Set frame format:8 data,2 stop bits */
	UCSR0C=(1<<UMSEL00)|(1<<USBS0)|(3<<UCSZ00);
 66a:	8e e4       	ldi	r24, 0x4E	; 78
 66c:	80 93 c2 00 	sts	0x00C2, r24
{

  /* Initialization */
  PORT_Init();
  USART_Init(MYUBRR);
  INT_Init();
 670:	0e 94 ae 00 	call	0x15c	; 0x15c <INT_Init>
  // clear external interrupt 0,1,2,3,5,6 flag 
  EIFR|=(1<<INTF0)|(1<<INTF1)|(1<<INTF2)|(1<<INTF3)|(1<<INTF5)|(1<<INTF6); 
}
void TIMER1_Init(void)
{
  TCCR1A=0x00;
 674:	10 92 80 00 	sts	0x0080, r1
  TCCR1B=(1<<CS12);  // prescaler :clk/256  i.e. 62500Hz
 678:	84 e0       	ldi	r24, 0x04	; 4
 67a:	80 93 81 00 	sts	0x0081, r24
  TCNT1=0x85EE;   // timer: 0.5s
 67e:	8e ee       	ldi	r24, 0xEE	; 238
 680:	95 e8       	ldi	r25, 0x85	; 133
 682:	90 93 85 00 	sts	0x0085, r25
 686:	80 93 84 00 	sts	0x0084, r24
  TIMSK1=(1<<TOIE1);  //overflow interrupt enable
 68a:	81 e0       	ldi	r24, 0x01	; 1
 68c:	80 93 6f 00 	sts	0x006F, r24
  TIFR1=(1<<TOV1);  //clear the timer 1 overflow flag
 690:	86 bb       	out	0x16, r24	; 22
}
void TIMER3_Init(void)
{
  /*no prescaling */
  TCCR3A=0x00;
 692:	10 92 90 00 	sts	0x0090, r1
  TCCR3B=(1<<CS30);
 696:	80 93 91 00 	sts	0x0091, r24
  TCNT3=0x00;
 69a:	10 92 95 00 	sts	0x0095, r1
 69e:	10 92 94 00 	sts	0x0094, r1
}
void ADC_Init(void)
{
  ADMUX=(1<<REFS1); // use internal 1.1V voltage reference
 6a2:	80 e8       	ldi	r24, 0x80	; 128
 6a4:	80 93 7c 00 	sts	0x007C, r24
                    // select ADC0 as the input battery voltage pin 
  /* ADC Enable, ADC Start Conversion, ADC Auto Trigger Enable
  ADC Interrupt Enable, Divison factor=32 */
  ADCSRA=(1<<ADEN)|(1<<ADSC)|(1<<ADATE)|(1<<ADIE)|5; 
 6a8:	8d ee       	ldi	r24, 0xED	; 237
 6aa:	80 93 7a 00 	sts	0x007A, r24
  USART_Init(MYUBRR);
  INT_Init();
  TIMER1_Init();
  TIMER3_Init();
  ADC_Init();
  stopcar();
 6ae:	0e 94 9f 02 	call	0x53e	; 0x53e <stopcar>
  wdt_disable();
 6b2:	88 e1       	ldi	r24, 0x18	; 24
 6b4:	0f b6       	in	r0, 0x3f	; 63
 6b6:	f8 94       	cli
 6b8:	80 93 60 00 	sts	0x0060, r24
 6bc:	10 92 60 00 	sts	0x0060, r1
 6c0:	0f be       	out	0x3f, r0	; 63
  /* Global Interrupt Enable */
  sei();  //SREG=(1<<7);
 6c2:	78 94       	sei
  while(1) 
  {
   controlmove();
 6c4:	0e 94 ad 02 	call	0x55a	; 0x55a <controlmove>
 6c8:	fd cf       	rjmp	.-6      	; 0x6c4 <main+0x6e>

000006ca <map>:
  sbi(PORTE,3);
  sbi(PORTH,3);
  TCCR3B&=0x00; //stop timer 3
}
int map(int ch,int x,int y,int a,int b)
{
 6ca:	2f 92       	push	r2
 6cc:	3f 92       	push	r3
 6ce:	4f 92       	push	r4
 6d0:	5f 92       	push	r5
 6d2:	6f 92       	push	r6
 6d4:	7f 92       	push	r7
 6d6:	8f 92       	push	r8
 6d8:	9f 92       	push	r9
 6da:	af 92       	push	r10
 6dc:	bf 92       	push	r11
 6de:	cf 92       	push	r12
 6e0:	df 92       	push	r13
 6e2:	ef 92       	push	r14
 6e4:	ff 92       	push	r15
 6e6:	0f 93       	push	r16
 6e8:	1f 93       	push	r17
 6ea:	df 93       	push	r29
 6ec:	cf 93       	push	r28
 6ee:	00 d0       	rcall	.+0      	; 0x6f0 <map+0x26>
 6f0:	0f 92       	push	r0
 6f2:	cd b7       	in	r28, 0x3d	; 61
 6f4:	de b7       	in	r29, 0x3e	; 62
 6f6:	6c 01       	movw	r12, r24
 6f8:	1b 01       	movw	r2, r22
 6fa:	4a 01       	movw	r8, r20
 6fc:	29 01       	movw	r4, r18
 6fe:	b8 01       	movw	r22, r16
 700:	62 1b       	sub	r22, r18
 702:	73 0b       	sbc	r23, r19
 704:	88 27       	eor	r24, r24
 706:	77 fd       	sbrc	r23, 7
 708:	80 95       	com	r24
 70a:	98 2f       	mov	r25, r24
 70c:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__floatsisf>
 710:	69 83       	std	Y+1, r22	; 0x01
 712:	7a 83       	std	Y+2, r23	; 0x02
 714:	8b 83       	std	Y+3, r24	; 0x03
 716:	9c 83       	std	Y+4, r25	; 0x04
 718:	ee 24       	eor	r14, r14
 71a:	d7 fc       	sbrc	r13, 7
 71c:	e0 94       	com	r14
 71e:	fe 2c       	mov	r15, r14
 720:	c7 01       	movw	r24, r14
 722:	b6 01       	movw	r22, r12
 724:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__floatsisf>
 728:	7b 01       	movw	r14, r22
 72a:	8c 01       	movw	r16, r24
 72c:	b1 01       	movw	r22, r2
 72e:	88 27       	eor	r24, r24
 730:	77 fd       	sbrc	r23, 7
 732:	80 95       	com	r24
 734:	98 2f       	mov	r25, r24
 736:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__floatsisf>
 73a:	9b 01       	movw	r18, r22
 73c:	ac 01       	movw	r20, r24
 73e:	c8 01       	movw	r24, r16
 740:	b7 01       	movw	r22, r14
 742:	0e 94 58 05 	call	0xab0	; 0xab0 <__subsf3>
 746:	9b 01       	movw	r18, r22
 748:	ac 01       	movw	r20, r24
 74a:	69 81       	ldd	r22, Y+1	; 0x01
 74c:	7a 81       	ldd	r23, Y+2	; 0x02
 74e:	8b 81       	ldd	r24, Y+3	; 0x03
 750:	9c 81       	ldd	r25, Y+4	; 0x04
 752:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__mulsf3>
 756:	7b 01       	movw	r14, r22
 758:	8c 01       	movw	r16, r24
 75a:	82 18       	sub	r8, r2
 75c:	93 08       	sbc	r9, r3
 75e:	aa 24       	eor	r10, r10
 760:	97 fc       	sbrc	r9, 7
 762:	a0 94       	com	r10
 764:	ba 2c       	mov	r11, r10
 766:	c5 01       	movw	r24, r10
 768:	b4 01       	movw	r22, r8
 76a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__floatsisf>
 76e:	9b 01       	movw	r18, r22
 770:	ac 01       	movw	r20, r24
 772:	c8 01       	movw	r24, r16
 774:	b7 01       	movw	r22, r14
 776:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divsf3>
 77a:	7b 01       	movw	r14, r22
 77c:	8c 01       	movw	r16, r24
 77e:	66 24       	eor	r6, r6
 780:	57 fc       	sbrc	r5, 7
 782:	60 94       	com	r6
 784:	76 2c       	mov	r7, r6
 786:	c3 01       	movw	r24, r6
 788:	b2 01       	movw	r22, r4
 78a:	0e 94 58 06 	call	0xcb0	; 0xcb0 <__floatsisf>
 78e:	9b 01       	movw	r18, r22
 790:	ac 01       	movw	r20, r24
 792:	c8 01       	movw	r24, r16
 794:	b7 01       	movw	r22, r14
 796:	0e 94 59 05 	call	0xab2	; 0xab2 <__addsf3>
 79a:	0e 94 25 06 	call	0xc4a	; 0xc4a <__fixsfsi>
	return((b-a)*(ch*1.0-x)/(y-x)+a);
 79e:	cb 01       	movw	r24, r22
 7a0:	0f 90       	pop	r0
 7a2:	0f 90       	pop	r0
 7a4:	0f 90       	pop	r0
 7a6:	0f 90       	pop	r0
 7a8:	cf 91       	pop	r28
 7aa:	df 91       	pop	r29
 7ac:	1f 91       	pop	r17
 7ae:	0f 91       	pop	r16
 7b0:	ff 90       	pop	r15
 7b2:	ef 90       	pop	r14
 7b4:	df 90       	pop	r13
 7b6:	cf 90       	pop	r12
 7b8:	bf 90       	pop	r11
 7ba:	af 90       	pop	r10
 7bc:	9f 90       	pop	r9
 7be:	8f 90       	pop	r8
 7c0:	7f 90       	pop	r7
 7c2:	6f 90       	pop	r6
 7c4:	5f 90       	pop	r5
 7c6:	4f 90       	pop	r4
 7c8:	3f 90       	pop	r3
 7ca:	2f 90       	pop	r2
 7cc:	08 95       	ret

000007ce <__vector_6>:
  if(ch2<20&&ch2>-20)
     {ch2=0;}
  absch2=abs(ch2);
}
ISR(INT5_vect)
{
 7ce:	1f 92       	push	r1
 7d0:	0f 92       	push	r0
 7d2:	0f b6       	in	r0, 0x3f	; 63
 7d4:	0f 92       	push	r0
 7d6:	0b b6       	in	r0, 0x3b	; 59
 7d8:	0f 92       	push	r0
 7da:	11 24       	eor	r1, r1
 7dc:	0f 93       	push	r16
 7de:	1f 93       	push	r17
 7e0:	2f 93       	push	r18
 7e2:	3f 93       	push	r19
 7e4:	4f 93       	push	r20
 7e6:	5f 93       	push	r21
 7e8:	6f 93       	push	r22
 7ea:	7f 93       	push	r23
 7ec:	8f 93       	push	r24
 7ee:	9f 93       	push	r25
 7f0:	af 93       	push	r26
 7f2:	bf 93       	push	r27
 7f4:	ef 93       	push	r30
 7f6:	ff 93       	push	r31
  TCNT3=0x0000;
 7f8:	10 92 95 00 	sts	0x0095, r1
 7fc:	10 92 94 00 	sts	0x0094, r1
  while(bit_is_set(PINE,PE5));
 800:	65 99       	sbic	0x0c, 5	; 12
 802:	fe cf       	rjmp	.-4      	; 0x800 <__vector_6+0x32>
  unsigned int now=TCNT3;
 804:	60 91 94 00 	lds	r22, 0x0094
 808:	70 91 95 00 	lds	r23, 0x0095
  ch4=now/16.0/1000;   //Measuring the width of incoming high 
                         //voltage pulse in channel 2
  ch4=map(ch4,1000,2000,-255,255);
 80c:	80 e0       	ldi	r24, 0x00	; 0
 80e:	90 e0       	ldi	r25, 0x00	; 0
 810:	0e 94 56 06 	call	0xcac	; 0xcac <__floatunsisf>
 814:	20 e0       	ldi	r18, 0x00	; 0
 816:	30 e0       	ldi	r19, 0x00	; 0
 818:	40 e8       	ldi	r20, 0x80	; 128
 81a:	5d e3       	ldi	r21, 0x3D	; 61
 81c:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__mulsf3>
 820:	20 e0       	ldi	r18, 0x00	; 0
 822:	30 e0       	ldi	r19, 0x00	; 0
 824:	4a e7       	ldi	r20, 0x7A	; 122
 826:	54 e4       	ldi	r21, 0x44	; 68
 828:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divsf3>
 82c:	0e 94 25 06 	call	0xc4a	; 0xc4a <__fixsfsi>
 830:	dc 01       	movw	r26, r24
 832:	cb 01       	movw	r24, r22
 834:	68 ee       	ldi	r22, 0xE8	; 232
 836:	73 e0       	ldi	r23, 0x03	; 3
 838:	40 ed       	ldi	r20, 0xD0	; 208
 83a:	57 e0       	ldi	r21, 0x07	; 7
 83c:	21 e0       	ldi	r18, 0x01	; 1
 83e:	3f ef       	ldi	r19, 0xFF	; 255
 840:	0f ef       	ldi	r16, 0xFF	; 255
 842:	10 e0       	ldi	r17, 0x00	; 0
 844:	0e 94 65 03 	call	0x6ca	; 0x6ca <map>
  ch4=constrain(ch4, -255, 255);
 848:	8f 3f       	cpi	r24, 0xFF	; 255
 84a:	91 05       	cpc	r25, r1
 84c:	19 f0       	breq	.+6      	; 0x854 <__vector_6+0x86>
 84e:	14 f0       	brlt	.+4      	; 0x854 <__vector_6+0x86>
 850:	8f ef       	ldi	r24, 0xFF	; 255
 852:	90 e0       	ldi	r25, 0x00	; 0
 854:	2f ef       	ldi	r18, 0xFF	; 255
 856:	81 30       	cpi	r24, 0x01	; 1
 858:	92 07       	cpc	r25, r18
 85a:	14 f4       	brge	.+4      	; 0x860 <__vector_6+0x92>
 85c:	81 e0       	ldi	r24, 0x01	; 1
 85e:	9f ef       	ldi	r25, 0xFF	; 255
 860:	90 93 0b 02 	sts	0x020B, r25
 864:	80 93 0a 02 	sts	0x020A, r24
  if(ch4<20&&ch4>-20)
 868:	43 96       	adiw	r24, 0x13	; 19
 86a:	87 97       	sbiw	r24, 0x27	; 39
 86c:	20 f4       	brcc	.+8      	; 0x876 <__vector_6+0xa8>
     {ch4=0;}
 86e:	10 92 0b 02 	sts	0x020B, r1
 872:	10 92 0a 02 	sts	0x020A, r1
  absch4=abs(ch4);
 876:	20 91 0a 02 	lds	r18, 0x020A
 87a:	30 91 0b 02 	lds	r19, 0x020B
 87e:	30 93 0d 02 	sts	0x020D, r19
 882:	20 93 0c 02 	sts	0x020C, r18
 886:	37 ff       	sbrs	r19, 7
 888:	08 c0       	rjmp	.+16     	; 0x89a <__vector_6+0xcc>
 88a:	88 27       	eor	r24, r24
 88c:	99 27       	eor	r25, r25
 88e:	82 1b       	sub	r24, r18
 890:	93 0b       	sbc	r25, r19
 892:	90 93 0d 02 	sts	0x020D, r25
 896:	80 93 0c 02 	sts	0x020C, r24
}
 89a:	ff 91       	pop	r31
 89c:	ef 91       	pop	r30
 89e:	bf 91       	pop	r27
 8a0:	af 91       	pop	r26
 8a2:	9f 91       	pop	r25
 8a4:	8f 91       	pop	r24
 8a6:	7f 91       	pop	r23
 8a8:	6f 91       	pop	r22
 8aa:	5f 91       	pop	r21
 8ac:	4f 91       	pop	r20
 8ae:	3f 91       	pop	r19
 8b0:	2f 91       	pop	r18
 8b2:	1f 91       	pop	r17
 8b4:	0f 91       	pop	r16
 8b6:	0f 90       	pop	r0
 8b8:	0b be       	out	0x3b, r0	; 59
 8ba:	0f 90       	pop	r0
 8bc:	0f be       	out	0x3f, r0	; 63
 8be:	0f 90       	pop	r0
 8c0:	1f 90       	pop	r1
 8c2:	18 95       	reti

000008c4 <__vector_5>:
  if(ch1<20&&ch1>-20)
     {ch1=0;}
  absch1=abs(ch1);
}
ISR(INT4_vect)
{
 8c4:	1f 92       	push	r1
 8c6:	0f 92       	push	r0
 8c8:	0f b6       	in	r0, 0x3f	; 63
 8ca:	0f 92       	push	r0
 8cc:	0b b6       	in	r0, 0x3b	; 59
 8ce:	0f 92       	push	r0
 8d0:	11 24       	eor	r1, r1
 8d2:	0f 93       	push	r16
 8d4:	1f 93       	push	r17
 8d6:	2f 93       	push	r18
 8d8:	3f 93       	push	r19
 8da:	4f 93       	push	r20
 8dc:	5f 93       	push	r21
 8de:	6f 93       	push	r22
 8e0:	7f 93       	push	r23
 8e2:	8f 93       	push	r24
 8e4:	9f 93       	push	r25
 8e6:	af 93       	push	r26
 8e8:	bf 93       	push	r27
 8ea:	ef 93       	push	r30
 8ec:	ff 93       	push	r31
  TCNT3=0x0000;
 8ee:	10 92 95 00 	sts	0x0095, r1
 8f2:	10 92 94 00 	sts	0x0094, r1
  while(bit_is_set(PINE,PE4));
 8f6:	64 99       	sbic	0x0c, 4	; 12
 8f8:	fe cf       	rjmp	.-4      	; 0x8f6 <__vector_5+0x32>
  unsigned int now=TCNT3;
 8fa:	60 91 94 00 	lds	r22, 0x0094
 8fe:	70 91 95 00 	lds	r23, 0x0095
  ch2=now/16.0/1000;   //Measuring the width of incoming high 
                         //voltage pulse in channel 2
  ch2=map(ch2,1000,2000,-255,255);
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	90 e0       	ldi	r25, 0x00	; 0
 906:	0e 94 56 06 	call	0xcac	; 0xcac <__floatunsisf>
 90a:	20 e0       	ldi	r18, 0x00	; 0
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	40 e8       	ldi	r20, 0x80	; 128
 910:	5d e3       	ldi	r21, 0x3D	; 61
 912:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__mulsf3>
 916:	20 e0       	ldi	r18, 0x00	; 0
 918:	30 e0       	ldi	r19, 0x00	; 0
 91a:	4a e7       	ldi	r20, 0x7A	; 122
 91c:	54 e4       	ldi	r21, 0x44	; 68
 91e:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divsf3>
 922:	0e 94 25 06 	call	0xc4a	; 0xc4a <__fixsfsi>
 926:	dc 01       	movw	r26, r24
 928:	cb 01       	movw	r24, r22
 92a:	68 ee       	ldi	r22, 0xE8	; 232
 92c:	73 e0       	ldi	r23, 0x03	; 3
 92e:	40 ed       	ldi	r20, 0xD0	; 208
 930:	57 e0       	ldi	r21, 0x07	; 7
 932:	21 e0       	ldi	r18, 0x01	; 1
 934:	3f ef       	ldi	r19, 0xFF	; 255
 936:	0f ef       	ldi	r16, 0xFF	; 255
 938:	10 e0       	ldi	r17, 0x00	; 0
 93a:	0e 94 65 03 	call	0x6ca	; 0x6ca <map>
  ch2=constrain(ch2, -255, 255);
 93e:	8f 3f       	cpi	r24, 0xFF	; 255
 940:	91 05       	cpc	r25, r1
 942:	19 f0       	breq	.+6      	; 0x94a <__vector_5+0x86>
 944:	14 f0       	brlt	.+4      	; 0x94a <__vector_5+0x86>
 946:	8f ef       	ldi	r24, 0xFF	; 255
 948:	90 e0       	ldi	r25, 0x00	; 0
 94a:	2f ef       	ldi	r18, 0xFF	; 255
 94c:	81 30       	cpi	r24, 0x01	; 1
 94e:	92 07       	cpc	r25, r18
 950:	14 f4       	brge	.+4      	; 0x956 <__vector_5+0x92>
 952:	81 e0       	ldi	r24, 0x01	; 1
 954:	9f ef       	ldi	r25, 0xFF	; 255
 956:	90 93 09 02 	sts	0x0209, r25
 95a:	80 93 08 02 	sts	0x0208, r24
  if(ch2<20&&ch2>-20)
 95e:	43 96       	adiw	r24, 0x13	; 19
 960:	87 97       	sbiw	r24, 0x27	; 39
 962:	20 f4       	brcc	.+8      	; 0x96c <__vector_5+0xa8>
     {ch2=0;}
 964:	10 92 09 02 	sts	0x0209, r1
 968:	10 92 08 02 	sts	0x0208, r1
  absch2=abs(ch2);
 96c:	20 91 08 02 	lds	r18, 0x0208
 970:	30 91 09 02 	lds	r19, 0x0209
 974:	30 93 14 02 	sts	0x0214, r19
 978:	20 93 13 02 	sts	0x0213, r18
 97c:	37 ff       	sbrs	r19, 7
 97e:	08 c0       	rjmp	.+16     	; 0x990 <__vector_5+0xcc>
 980:	88 27       	eor	r24, r24
 982:	99 27       	eor	r25, r25
 984:	82 1b       	sub	r24, r18
 986:	93 0b       	sbc	r25, r19
 988:	90 93 14 02 	sts	0x0214, r25
 98c:	80 93 13 02 	sts	0x0213, r24
}
 990:	ff 91       	pop	r31
 992:	ef 91       	pop	r30
 994:	bf 91       	pop	r27
 996:	af 91       	pop	r26
 998:	9f 91       	pop	r25
 99a:	8f 91       	pop	r24
 99c:	7f 91       	pop	r23
 99e:	6f 91       	pop	r22
 9a0:	5f 91       	pop	r21
 9a2:	4f 91       	pop	r20
 9a4:	3f 91       	pop	r19
 9a6:	2f 91       	pop	r18
 9a8:	1f 91       	pop	r17
 9aa:	0f 91       	pop	r16
 9ac:	0f 90       	pop	r0
 9ae:	0b be       	out	0x3b, r0	; 59
 9b0:	0f 90       	pop	r0
 9b2:	0f be       	out	0x3f, r0	; 63
 9b4:	0f 90       	pop	r0
 9b6:	1f 90       	pop	r1
 9b8:	18 95       	reti

000009ba <__vector_4>:
	{
		USART_Transmit('-');  // The motor is rotating backward
	}
}
ISR(INT3_vect)
{
 9ba:	1f 92       	push	r1
 9bc:	0f 92       	push	r0
 9be:	0f b6       	in	r0, 0x3f	; 63
 9c0:	0f 92       	push	r0
 9c2:	0b b6       	in	r0, 0x3b	; 59
 9c4:	0f 92       	push	r0
 9c6:	11 24       	eor	r1, r1
 9c8:	0f 93       	push	r16
 9ca:	1f 93       	push	r17
 9cc:	2f 93       	push	r18
 9ce:	3f 93       	push	r19
 9d0:	4f 93       	push	r20
 9d2:	5f 93       	push	r21
 9d4:	6f 93       	push	r22
 9d6:	7f 93       	push	r23
 9d8:	8f 93       	push	r24
 9da:	9f 93       	push	r25
 9dc:	af 93       	push	r26
 9de:	bf 93       	push	r27
 9e0:	ef 93       	push	r30
 9e2:	ff 93       	push	r31
  TCNT3=0x0000;
 9e4:	10 92 95 00 	sts	0x0095, r1
 9e8:	10 92 94 00 	sts	0x0094, r1
  while(bit_is_set(PIND,PD3));
 9ec:	4b 99       	sbic	0x09, 3	; 9
 9ee:	fe cf       	rjmp	.-4      	; 0x9ec <__vector_4+0x32>
  unsigned int now=TCNT3;
 9f0:	60 91 94 00 	lds	r22, 0x0094
 9f4:	70 91 95 00 	lds	r23, 0x0095
  ch1=now/16.0/1000; //Measuring the width of incoming high 
                         //voltage pulse in channel 1
  ch1=map(ch1,1000,2000,-255,255);
 9f8:	80 e0       	ldi	r24, 0x00	; 0
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	0e 94 56 06 	call	0xcac	; 0xcac <__floatunsisf>
 a00:	20 e0       	ldi	r18, 0x00	; 0
 a02:	30 e0       	ldi	r19, 0x00	; 0
 a04:	40 e8       	ldi	r20, 0x80	; 128
 a06:	5d e3       	ldi	r21, 0x3D	; 61
 a08:	0e 94 e4 06 	call	0xdc8	; 0xdc8 <__mulsf3>
 a0c:	20 e0       	ldi	r18, 0x00	; 0
 a0e:	30 e0       	ldi	r19, 0x00	; 0
 a10:	4a e7       	ldi	r20, 0x7A	; 122
 a12:	54 e4       	ldi	r21, 0x44	; 68
 a14:	0e 94 bd 05 	call	0xb7a	; 0xb7a <__divsf3>
 a18:	0e 94 25 06 	call	0xc4a	; 0xc4a <__fixsfsi>
 a1c:	dc 01       	movw	r26, r24
 a1e:	cb 01       	movw	r24, r22
 a20:	68 ee       	ldi	r22, 0xE8	; 232
 a22:	73 e0       	ldi	r23, 0x03	; 3
 a24:	40 ed       	ldi	r20, 0xD0	; 208
 a26:	57 e0       	ldi	r21, 0x07	; 7
 a28:	21 e0       	ldi	r18, 0x01	; 1
 a2a:	3f ef       	ldi	r19, 0xFF	; 255
 a2c:	0f ef       	ldi	r16, 0xFF	; 255
 a2e:	10 e0       	ldi	r17, 0x00	; 0
 a30:	0e 94 65 03 	call	0x6ca	; 0x6ca <map>
  ch1=constrain(ch1, -255, 255);
 a34:	8f 3f       	cpi	r24, 0xFF	; 255
 a36:	91 05       	cpc	r25, r1
 a38:	19 f0       	breq	.+6      	; 0xa40 <__vector_4+0x86>
 a3a:	14 f0       	brlt	.+4      	; 0xa40 <__vector_4+0x86>
 a3c:	8f ef       	ldi	r24, 0xFF	; 255
 a3e:	90 e0       	ldi	r25, 0x00	; 0
 a40:	2f ef       	ldi	r18, 0xFF	; 255
 a42:	81 30       	cpi	r24, 0x01	; 1
 a44:	92 07       	cpc	r25, r18
 a46:	14 f4       	brge	.+4      	; 0xa4c <__vector_4+0x92>
 a48:	81 e0       	ldi	r24, 0x01	; 1
 a4a:	9f ef       	ldi	r25, 0xFF	; 255
 a4c:	90 93 1c 02 	sts	0x021C, r25
 a50:	80 93 1b 02 	sts	0x021B, r24
  if(ch1<20&&ch1>-20)
 a54:	43 96       	adiw	r24, 0x13	; 19
 a56:	87 97       	sbiw	r24, 0x27	; 39
 a58:	20 f4       	brcc	.+8      	; 0xa62 <__vector_4+0xa8>
     {ch1=0;}
 a5a:	10 92 1c 02 	sts	0x021C, r1
 a5e:	10 92 1b 02 	sts	0x021B, r1
  absch1=abs(ch1);
 a62:	20 91 1b 02 	lds	r18, 0x021B
 a66:	30 91 1c 02 	lds	r19, 0x021C
 a6a:	30 93 1a 02 	sts	0x021A, r19
 a6e:	20 93 19 02 	sts	0x0219, r18
 a72:	37 ff       	sbrs	r19, 7
 a74:	08 c0       	rjmp	.+16     	; 0xa86 <__vector_4+0xcc>
 a76:	88 27       	eor	r24, r24
 a78:	99 27       	eor	r25, r25
 a7a:	82 1b       	sub	r24, r18
 a7c:	93 0b       	sbc	r25, r19
 a7e:	90 93 1a 02 	sts	0x021A, r25
 a82:	80 93 19 02 	sts	0x0219, r24
}
 a86:	ff 91       	pop	r31
 a88:	ef 91       	pop	r30
 a8a:	bf 91       	pop	r27
 a8c:	af 91       	pop	r26
 a8e:	9f 91       	pop	r25
 a90:	8f 91       	pop	r24
 a92:	7f 91       	pop	r23
 a94:	6f 91       	pop	r22
 a96:	5f 91       	pop	r21
 a98:	4f 91       	pop	r20
 a9a:	3f 91       	pop	r19
 a9c:	2f 91       	pop	r18
 a9e:	1f 91       	pop	r17
 aa0:	0f 91       	pop	r16
 aa2:	0f 90       	pop	r0
 aa4:	0b be       	out	0x3b, r0	; 59
 aa6:	0f 90       	pop	r0
 aa8:	0f be       	out	0x3f, r0	; 63
 aaa:	0f 90       	pop	r0
 aac:	1f 90       	pop	r1
 aae:	18 95       	reti

00000ab0 <__subsf3>:
 ab0:	50 58       	subi	r21, 0x80	; 128

00000ab2 <__addsf3>:
 ab2:	bb 27       	eor	r27, r27
 ab4:	aa 27       	eor	r26, r26
 ab6:	0e d0       	rcall	.+28     	; 0xad4 <__addsf3x>
 ab8:	4d c1       	rjmp	.+666    	; 0xd54 <__fp_round>
 aba:	3e d1       	rcall	.+636    	; 0xd38 <__fp_pscA>
 abc:	30 f0       	brcs	.+12     	; 0xaca <__addsf3+0x18>
 abe:	43 d1       	rcall	.+646    	; 0xd46 <__fp_pscB>
 ac0:	20 f0       	brcs	.+8      	; 0xaca <__addsf3+0x18>
 ac2:	31 f4       	brne	.+12     	; 0xad0 <__addsf3+0x1e>
 ac4:	9f 3f       	cpi	r25, 0xFF	; 255
 ac6:	11 f4       	brne	.+4      	; 0xacc <__addsf3+0x1a>
 ac8:	1e f4       	brtc	.+6      	; 0xad0 <__addsf3+0x1e>
 aca:	33 c1       	rjmp	.+614    	; 0xd32 <__fp_nan>
 acc:	0e f4       	brtc	.+2      	; 0xad0 <__addsf3+0x1e>
 ace:	e0 95       	com	r30
 ad0:	e7 fb       	bst	r30, 7
 ad2:	29 c1       	rjmp	.+594    	; 0xd26 <__fp_inf>

00000ad4 <__addsf3x>:
 ad4:	e9 2f       	mov	r30, r25
 ad6:	4f d1       	rcall	.+670    	; 0xd76 <__fp_split3>
 ad8:	80 f3       	brcs	.-32     	; 0xaba <__addsf3+0x8>
 ada:	ba 17       	cp	r27, r26
 adc:	62 07       	cpc	r22, r18
 ade:	73 07       	cpc	r23, r19
 ae0:	84 07       	cpc	r24, r20
 ae2:	95 07       	cpc	r25, r21
 ae4:	18 f0       	brcs	.+6      	; 0xaec <__addsf3x+0x18>
 ae6:	71 f4       	brne	.+28     	; 0xb04 <__addsf3x+0x30>
 ae8:	9e f5       	brtc	.+102    	; 0xb50 <__addsf3x+0x7c>
 aea:	67 c1       	rjmp	.+718    	; 0xdba <__fp_zero>
 aec:	0e f4       	brtc	.+2      	; 0xaf0 <__addsf3x+0x1c>
 aee:	e0 95       	com	r30
 af0:	0b 2e       	mov	r0, r27
 af2:	ba 2f       	mov	r27, r26
 af4:	a0 2d       	mov	r26, r0
 af6:	0b 01       	movw	r0, r22
 af8:	b9 01       	movw	r22, r18
 afa:	90 01       	movw	r18, r0
 afc:	0c 01       	movw	r0, r24
 afe:	ca 01       	movw	r24, r20
 b00:	a0 01       	movw	r20, r0
 b02:	11 24       	eor	r1, r1
 b04:	ff 27       	eor	r31, r31
 b06:	59 1b       	sub	r21, r25
 b08:	99 f0       	breq	.+38     	; 0xb30 <__addsf3x+0x5c>
 b0a:	59 3f       	cpi	r21, 0xF9	; 249
 b0c:	50 f4       	brcc	.+20     	; 0xb22 <__addsf3x+0x4e>
 b0e:	50 3e       	cpi	r21, 0xE0	; 224
 b10:	68 f1       	brcs	.+90     	; 0xb6c <__addsf3x+0x98>
 b12:	1a 16       	cp	r1, r26
 b14:	f0 40       	sbci	r31, 0x00	; 0
 b16:	a2 2f       	mov	r26, r18
 b18:	23 2f       	mov	r18, r19
 b1a:	34 2f       	mov	r19, r20
 b1c:	44 27       	eor	r20, r20
 b1e:	58 5f       	subi	r21, 0xF8	; 248
 b20:	f3 cf       	rjmp	.-26     	; 0xb08 <__addsf3x+0x34>
 b22:	46 95       	lsr	r20
 b24:	37 95       	ror	r19
 b26:	27 95       	ror	r18
 b28:	a7 95       	ror	r26
 b2a:	f0 40       	sbci	r31, 0x00	; 0
 b2c:	53 95       	inc	r21
 b2e:	c9 f7       	brne	.-14     	; 0xb22 <__addsf3x+0x4e>
 b30:	7e f4       	brtc	.+30     	; 0xb50 <__addsf3x+0x7c>
 b32:	1f 16       	cp	r1, r31
 b34:	ba 0b       	sbc	r27, r26
 b36:	62 0b       	sbc	r22, r18
 b38:	73 0b       	sbc	r23, r19
 b3a:	84 0b       	sbc	r24, r20
 b3c:	ba f0       	brmi	.+46     	; 0xb6c <__addsf3x+0x98>
 b3e:	91 50       	subi	r25, 0x01	; 1
 b40:	a1 f0       	breq	.+40     	; 0xb6a <__addsf3x+0x96>
 b42:	ff 0f       	add	r31, r31
 b44:	bb 1f       	adc	r27, r27
 b46:	66 1f       	adc	r22, r22
 b48:	77 1f       	adc	r23, r23
 b4a:	88 1f       	adc	r24, r24
 b4c:	c2 f7       	brpl	.-16     	; 0xb3e <__addsf3x+0x6a>
 b4e:	0e c0       	rjmp	.+28     	; 0xb6c <__addsf3x+0x98>
 b50:	ba 0f       	add	r27, r26
 b52:	62 1f       	adc	r22, r18
 b54:	73 1f       	adc	r23, r19
 b56:	84 1f       	adc	r24, r20
 b58:	48 f4       	brcc	.+18     	; 0xb6c <__addsf3x+0x98>
 b5a:	87 95       	ror	r24
 b5c:	77 95       	ror	r23
 b5e:	67 95       	ror	r22
 b60:	b7 95       	ror	r27
 b62:	f7 95       	ror	r31
 b64:	9e 3f       	cpi	r25, 0xFE	; 254
 b66:	08 f0       	brcs	.+2      	; 0xb6a <__addsf3x+0x96>
 b68:	b3 cf       	rjmp	.-154    	; 0xad0 <__addsf3+0x1e>
 b6a:	93 95       	inc	r25
 b6c:	88 0f       	add	r24, r24
 b6e:	08 f0       	brcs	.+2      	; 0xb72 <__addsf3x+0x9e>
 b70:	99 27       	eor	r25, r25
 b72:	ee 0f       	add	r30, r30
 b74:	97 95       	ror	r25
 b76:	87 95       	ror	r24
 b78:	08 95       	ret

00000b7a <__divsf3>:
 b7a:	0c d0       	rcall	.+24     	; 0xb94 <__divsf3x>
 b7c:	eb c0       	rjmp	.+470    	; 0xd54 <__fp_round>
 b7e:	e3 d0       	rcall	.+454    	; 0xd46 <__fp_pscB>
 b80:	40 f0       	brcs	.+16     	; 0xb92 <__divsf3+0x18>
 b82:	da d0       	rcall	.+436    	; 0xd38 <__fp_pscA>
 b84:	30 f0       	brcs	.+12     	; 0xb92 <__divsf3+0x18>
 b86:	21 f4       	brne	.+8      	; 0xb90 <__divsf3+0x16>
 b88:	5f 3f       	cpi	r21, 0xFF	; 255
 b8a:	19 f0       	breq	.+6      	; 0xb92 <__divsf3+0x18>
 b8c:	cc c0       	rjmp	.+408    	; 0xd26 <__fp_inf>
 b8e:	51 11       	cpse	r21, r1
 b90:	15 c1       	rjmp	.+554    	; 0xdbc <__fp_szero>
 b92:	cf c0       	rjmp	.+414    	; 0xd32 <__fp_nan>

00000b94 <__divsf3x>:
 b94:	f0 d0       	rcall	.+480    	; 0xd76 <__fp_split3>
 b96:	98 f3       	brcs	.-26     	; 0xb7e <__divsf3+0x4>

00000b98 <__divsf3_pse>:
 b98:	99 23       	and	r25, r25
 b9a:	c9 f3       	breq	.-14     	; 0xb8e <__divsf3+0x14>
 b9c:	55 23       	and	r21, r21
 b9e:	b1 f3       	breq	.-20     	; 0xb8c <__divsf3+0x12>
 ba0:	95 1b       	sub	r25, r21
 ba2:	55 0b       	sbc	r21, r21
 ba4:	bb 27       	eor	r27, r27
 ba6:	aa 27       	eor	r26, r26
 ba8:	62 17       	cp	r22, r18
 baa:	73 07       	cpc	r23, r19
 bac:	84 07       	cpc	r24, r20
 bae:	38 f0       	brcs	.+14     	; 0xbbe <__divsf3_pse+0x26>
 bb0:	9f 5f       	subi	r25, 0xFF	; 255
 bb2:	5f 4f       	sbci	r21, 0xFF	; 255
 bb4:	22 0f       	add	r18, r18
 bb6:	33 1f       	adc	r19, r19
 bb8:	44 1f       	adc	r20, r20
 bba:	aa 1f       	adc	r26, r26
 bbc:	a9 f3       	breq	.-22     	; 0xba8 <__divsf3_pse+0x10>
 bbe:	33 d0       	rcall	.+102    	; 0xc26 <__divsf3_pse+0x8e>
 bc0:	0e 2e       	mov	r0, r30
 bc2:	3a f0       	brmi	.+14     	; 0xbd2 <__divsf3_pse+0x3a>
 bc4:	e0 e8       	ldi	r30, 0x80	; 128
 bc6:	30 d0       	rcall	.+96     	; 0xc28 <__divsf3_pse+0x90>
 bc8:	91 50       	subi	r25, 0x01	; 1
 bca:	50 40       	sbci	r21, 0x00	; 0
 bcc:	e6 95       	lsr	r30
 bce:	00 1c       	adc	r0, r0
 bd0:	ca f7       	brpl	.-14     	; 0xbc4 <__divsf3_pse+0x2c>
 bd2:	29 d0       	rcall	.+82     	; 0xc26 <__divsf3_pse+0x8e>
 bd4:	fe 2f       	mov	r31, r30
 bd6:	27 d0       	rcall	.+78     	; 0xc26 <__divsf3_pse+0x8e>
 bd8:	66 0f       	add	r22, r22
 bda:	77 1f       	adc	r23, r23
 bdc:	88 1f       	adc	r24, r24
 bde:	bb 1f       	adc	r27, r27
 be0:	26 17       	cp	r18, r22
 be2:	37 07       	cpc	r19, r23
 be4:	48 07       	cpc	r20, r24
 be6:	ab 07       	cpc	r26, r27
 be8:	b0 e8       	ldi	r27, 0x80	; 128
 bea:	09 f0       	breq	.+2      	; 0xbee <__divsf3_pse+0x56>
 bec:	bb 0b       	sbc	r27, r27
 bee:	80 2d       	mov	r24, r0
 bf0:	bf 01       	movw	r22, r30
 bf2:	ff 27       	eor	r31, r31
 bf4:	93 58       	subi	r25, 0x83	; 131
 bf6:	5f 4f       	sbci	r21, 0xFF	; 255
 bf8:	2a f0       	brmi	.+10     	; 0xc04 <__divsf3_pse+0x6c>
 bfa:	9e 3f       	cpi	r25, 0xFE	; 254
 bfc:	51 05       	cpc	r21, r1
 bfe:	68 f0       	brcs	.+26     	; 0xc1a <__divsf3_pse+0x82>
 c00:	92 c0       	rjmp	.+292    	; 0xd26 <__fp_inf>
 c02:	dc c0       	rjmp	.+440    	; 0xdbc <__fp_szero>
 c04:	5f 3f       	cpi	r21, 0xFF	; 255
 c06:	ec f3       	brlt	.-6      	; 0xc02 <__divsf3_pse+0x6a>
 c08:	98 3e       	cpi	r25, 0xE8	; 232
 c0a:	dc f3       	brlt	.-10     	; 0xc02 <__divsf3_pse+0x6a>
 c0c:	86 95       	lsr	r24
 c0e:	77 95       	ror	r23
 c10:	67 95       	ror	r22
 c12:	b7 95       	ror	r27
 c14:	f7 95       	ror	r31
 c16:	9f 5f       	subi	r25, 0xFF	; 255
 c18:	c9 f7       	brne	.-14     	; 0xc0c <__divsf3_pse+0x74>
 c1a:	88 0f       	add	r24, r24
 c1c:	91 1d       	adc	r25, r1
 c1e:	96 95       	lsr	r25
 c20:	87 95       	ror	r24
 c22:	97 f9       	bld	r25, 7
 c24:	08 95       	ret
 c26:	e1 e0       	ldi	r30, 0x01	; 1
 c28:	66 0f       	add	r22, r22
 c2a:	77 1f       	adc	r23, r23
 c2c:	88 1f       	adc	r24, r24
 c2e:	bb 1f       	adc	r27, r27
 c30:	62 17       	cp	r22, r18
 c32:	73 07       	cpc	r23, r19
 c34:	84 07       	cpc	r24, r20
 c36:	ba 07       	cpc	r27, r26
 c38:	20 f0       	brcs	.+8      	; 0xc42 <__divsf3_pse+0xaa>
 c3a:	62 1b       	sub	r22, r18
 c3c:	73 0b       	sbc	r23, r19
 c3e:	84 0b       	sbc	r24, r20
 c40:	ba 0b       	sbc	r27, r26
 c42:	ee 1f       	adc	r30, r30
 c44:	88 f7       	brcc	.-30     	; 0xc28 <__divsf3_pse+0x90>
 c46:	e0 95       	com	r30
 c48:	08 95       	ret

00000c4a <__fixsfsi>:
 c4a:	04 d0       	rcall	.+8      	; 0xc54 <__fixunssfsi>
 c4c:	68 94       	set
 c4e:	b1 11       	cpse	r27, r1
 c50:	b5 c0       	rjmp	.+362    	; 0xdbc <__fp_szero>
 c52:	08 95       	ret

00000c54 <__fixunssfsi>:
 c54:	98 d0       	rcall	.+304    	; 0xd86 <__fp_splitA>
 c56:	88 f0       	brcs	.+34     	; 0xc7a <__fixunssfsi+0x26>
 c58:	9f 57       	subi	r25, 0x7F	; 127
 c5a:	90 f0       	brcs	.+36     	; 0xc80 <__fixunssfsi+0x2c>
 c5c:	b9 2f       	mov	r27, r25
 c5e:	99 27       	eor	r25, r25
 c60:	b7 51       	subi	r27, 0x17	; 23
 c62:	a0 f0       	brcs	.+40     	; 0xc8c <__fixunssfsi+0x38>
 c64:	d1 f0       	breq	.+52     	; 0xc9a <__fixunssfsi+0x46>
 c66:	66 0f       	add	r22, r22
 c68:	77 1f       	adc	r23, r23
 c6a:	88 1f       	adc	r24, r24
 c6c:	99 1f       	adc	r25, r25
 c6e:	1a f0       	brmi	.+6      	; 0xc76 <__fixunssfsi+0x22>
 c70:	ba 95       	dec	r27
 c72:	c9 f7       	brne	.-14     	; 0xc66 <__fixunssfsi+0x12>
 c74:	12 c0       	rjmp	.+36     	; 0xc9a <__fixunssfsi+0x46>
 c76:	b1 30       	cpi	r27, 0x01	; 1
 c78:	81 f0       	breq	.+32     	; 0xc9a <__fixunssfsi+0x46>
 c7a:	9f d0       	rcall	.+318    	; 0xdba <__fp_zero>
 c7c:	b1 e0       	ldi	r27, 0x01	; 1
 c7e:	08 95       	ret
 c80:	9c c0       	rjmp	.+312    	; 0xdba <__fp_zero>
 c82:	67 2f       	mov	r22, r23
 c84:	78 2f       	mov	r23, r24
 c86:	88 27       	eor	r24, r24
 c88:	b8 5f       	subi	r27, 0xF8	; 248
 c8a:	39 f0       	breq	.+14     	; 0xc9a <__fixunssfsi+0x46>
 c8c:	b9 3f       	cpi	r27, 0xF9	; 249
 c8e:	cc f3       	brlt	.-14     	; 0xc82 <__fixunssfsi+0x2e>
 c90:	86 95       	lsr	r24
 c92:	77 95       	ror	r23
 c94:	67 95       	ror	r22
 c96:	b3 95       	inc	r27
 c98:	d9 f7       	brne	.-10     	; 0xc90 <__fixunssfsi+0x3c>
 c9a:	3e f4       	brtc	.+14     	; 0xcaa <__fixunssfsi+0x56>
 c9c:	90 95       	com	r25
 c9e:	80 95       	com	r24
 ca0:	70 95       	com	r23
 ca2:	61 95       	neg	r22
 ca4:	7f 4f       	sbci	r23, 0xFF	; 255
 ca6:	8f 4f       	sbci	r24, 0xFF	; 255
 ca8:	9f 4f       	sbci	r25, 0xFF	; 255
 caa:	08 95       	ret

00000cac <__floatunsisf>:
 cac:	e8 94       	clt
 cae:	09 c0       	rjmp	.+18     	; 0xcc2 <__floatsisf+0x12>

00000cb0 <__floatsisf>:
 cb0:	97 fb       	bst	r25, 7
 cb2:	3e f4       	brtc	.+14     	; 0xcc2 <__floatsisf+0x12>
 cb4:	90 95       	com	r25
 cb6:	80 95       	com	r24
 cb8:	70 95       	com	r23
 cba:	61 95       	neg	r22
 cbc:	7f 4f       	sbci	r23, 0xFF	; 255
 cbe:	8f 4f       	sbci	r24, 0xFF	; 255
 cc0:	9f 4f       	sbci	r25, 0xFF	; 255
 cc2:	99 23       	and	r25, r25
 cc4:	a9 f0       	breq	.+42     	; 0xcf0 <__floatsisf+0x40>
 cc6:	f9 2f       	mov	r31, r25
 cc8:	96 e9       	ldi	r25, 0x96	; 150
 cca:	bb 27       	eor	r27, r27
 ccc:	93 95       	inc	r25
 cce:	f6 95       	lsr	r31
 cd0:	87 95       	ror	r24
 cd2:	77 95       	ror	r23
 cd4:	67 95       	ror	r22
 cd6:	b7 95       	ror	r27
 cd8:	f1 11       	cpse	r31, r1
 cda:	f8 cf       	rjmp	.-16     	; 0xccc <__floatsisf+0x1c>
 cdc:	fa f4       	brpl	.+62     	; 0xd1c <__floatsisf+0x6c>
 cde:	bb 0f       	add	r27, r27
 ce0:	11 f4       	brne	.+4      	; 0xce6 <__floatsisf+0x36>
 ce2:	60 ff       	sbrs	r22, 0
 ce4:	1b c0       	rjmp	.+54     	; 0xd1c <__floatsisf+0x6c>
 ce6:	6f 5f       	subi	r22, 0xFF	; 255
 ce8:	7f 4f       	sbci	r23, 0xFF	; 255
 cea:	8f 4f       	sbci	r24, 0xFF	; 255
 cec:	9f 4f       	sbci	r25, 0xFF	; 255
 cee:	16 c0       	rjmp	.+44     	; 0xd1c <__floatsisf+0x6c>
 cf0:	88 23       	and	r24, r24
 cf2:	11 f0       	breq	.+4      	; 0xcf8 <__floatsisf+0x48>
 cf4:	96 e9       	ldi	r25, 0x96	; 150
 cf6:	11 c0       	rjmp	.+34     	; 0xd1a <__floatsisf+0x6a>
 cf8:	77 23       	and	r23, r23
 cfa:	21 f0       	breq	.+8      	; 0xd04 <__floatsisf+0x54>
 cfc:	9e e8       	ldi	r25, 0x8E	; 142
 cfe:	87 2f       	mov	r24, r23
 d00:	76 2f       	mov	r23, r22
 d02:	05 c0       	rjmp	.+10     	; 0xd0e <__floatsisf+0x5e>
 d04:	66 23       	and	r22, r22
 d06:	71 f0       	breq	.+28     	; 0xd24 <__floatsisf+0x74>
 d08:	96 e8       	ldi	r25, 0x86	; 134
 d0a:	86 2f       	mov	r24, r22
 d0c:	70 e0       	ldi	r23, 0x00	; 0
 d0e:	60 e0       	ldi	r22, 0x00	; 0
 d10:	2a f0       	brmi	.+10     	; 0xd1c <__floatsisf+0x6c>
 d12:	9a 95       	dec	r25
 d14:	66 0f       	add	r22, r22
 d16:	77 1f       	adc	r23, r23
 d18:	88 1f       	adc	r24, r24
 d1a:	da f7       	brpl	.-10     	; 0xd12 <__floatsisf+0x62>
 d1c:	88 0f       	add	r24, r24
 d1e:	96 95       	lsr	r25
 d20:	87 95       	ror	r24
 d22:	97 f9       	bld	r25, 7
 d24:	08 95       	ret

00000d26 <__fp_inf>:
 d26:	97 f9       	bld	r25, 7
 d28:	9f 67       	ori	r25, 0x7F	; 127
 d2a:	80 e8       	ldi	r24, 0x80	; 128
 d2c:	70 e0       	ldi	r23, 0x00	; 0
 d2e:	60 e0       	ldi	r22, 0x00	; 0
 d30:	08 95       	ret

00000d32 <__fp_nan>:
 d32:	9f ef       	ldi	r25, 0xFF	; 255
 d34:	80 ec       	ldi	r24, 0xC0	; 192
 d36:	08 95       	ret

00000d38 <__fp_pscA>:
 d38:	00 24       	eor	r0, r0
 d3a:	0a 94       	dec	r0
 d3c:	16 16       	cp	r1, r22
 d3e:	17 06       	cpc	r1, r23
 d40:	18 06       	cpc	r1, r24
 d42:	09 06       	cpc	r0, r25
 d44:	08 95       	ret

00000d46 <__fp_pscB>:
 d46:	00 24       	eor	r0, r0
 d48:	0a 94       	dec	r0
 d4a:	12 16       	cp	r1, r18
 d4c:	13 06       	cpc	r1, r19
 d4e:	14 06       	cpc	r1, r20
 d50:	05 06       	cpc	r0, r21
 d52:	08 95       	ret

00000d54 <__fp_round>:
 d54:	09 2e       	mov	r0, r25
 d56:	03 94       	inc	r0
 d58:	00 0c       	add	r0, r0
 d5a:	11 f4       	brne	.+4      	; 0xd60 <__fp_round+0xc>
 d5c:	88 23       	and	r24, r24
 d5e:	52 f0       	brmi	.+20     	; 0xd74 <__fp_round+0x20>
 d60:	bb 0f       	add	r27, r27
 d62:	40 f4       	brcc	.+16     	; 0xd74 <__fp_round+0x20>
 d64:	bf 2b       	or	r27, r31
 d66:	11 f4       	brne	.+4      	; 0xd6c <__fp_round+0x18>
 d68:	60 ff       	sbrs	r22, 0
 d6a:	04 c0       	rjmp	.+8      	; 0xd74 <__fp_round+0x20>
 d6c:	6f 5f       	subi	r22, 0xFF	; 255
 d6e:	7f 4f       	sbci	r23, 0xFF	; 255
 d70:	8f 4f       	sbci	r24, 0xFF	; 255
 d72:	9f 4f       	sbci	r25, 0xFF	; 255
 d74:	08 95       	ret

00000d76 <__fp_split3>:
 d76:	57 fd       	sbrc	r21, 7
 d78:	90 58       	subi	r25, 0x80	; 128
 d7a:	44 0f       	add	r20, r20
 d7c:	55 1f       	adc	r21, r21
 d7e:	59 f0       	breq	.+22     	; 0xd96 <__fp_splitA+0x10>
 d80:	5f 3f       	cpi	r21, 0xFF	; 255
 d82:	71 f0       	breq	.+28     	; 0xda0 <__fp_splitA+0x1a>
 d84:	47 95       	ror	r20

00000d86 <__fp_splitA>:
 d86:	88 0f       	add	r24, r24
 d88:	97 fb       	bst	r25, 7
 d8a:	99 1f       	adc	r25, r25
 d8c:	61 f0       	breq	.+24     	; 0xda6 <__fp_splitA+0x20>
 d8e:	9f 3f       	cpi	r25, 0xFF	; 255
 d90:	79 f0       	breq	.+30     	; 0xdb0 <__fp_splitA+0x2a>
 d92:	87 95       	ror	r24
 d94:	08 95       	ret
 d96:	12 16       	cp	r1, r18
 d98:	13 06       	cpc	r1, r19
 d9a:	14 06       	cpc	r1, r20
 d9c:	55 1f       	adc	r21, r21
 d9e:	f2 cf       	rjmp	.-28     	; 0xd84 <__fp_split3+0xe>
 da0:	46 95       	lsr	r20
 da2:	f1 df       	rcall	.-30     	; 0xd86 <__fp_splitA>
 da4:	08 c0       	rjmp	.+16     	; 0xdb6 <__fp_splitA+0x30>
 da6:	16 16       	cp	r1, r22
 da8:	17 06       	cpc	r1, r23
 daa:	18 06       	cpc	r1, r24
 dac:	99 1f       	adc	r25, r25
 dae:	f1 cf       	rjmp	.-30     	; 0xd92 <__fp_splitA+0xc>
 db0:	86 95       	lsr	r24
 db2:	71 05       	cpc	r23, r1
 db4:	61 05       	cpc	r22, r1
 db6:	08 94       	sec
 db8:	08 95       	ret

00000dba <__fp_zero>:
 dba:	e8 94       	clt

00000dbc <__fp_szero>:
 dbc:	bb 27       	eor	r27, r27
 dbe:	66 27       	eor	r22, r22
 dc0:	77 27       	eor	r23, r23
 dc2:	cb 01       	movw	r24, r22
 dc4:	97 f9       	bld	r25, 7
 dc6:	08 95       	ret

00000dc8 <__mulsf3>:
 dc8:	0b d0       	rcall	.+22     	; 0xde0 <__mulsf3x>
 dca:	c4 cf       	rjmp	.-120    	; 0xd54 <__fp_round>
 dcc:	b5 df       	rcall	.-150    	; 0xd38 <__fp_pscA>
 dce:	28 f0       	brcs	.+10     	; 0xdda <__mulsf3+0x12>
 dd0:	ba df       	rcall	.-140    	; 0xd46 <__fp_pscB>
 dd2:	18 f0       	brcs	.+6      	; 0xdda <__mulsf3+0x12>
 dd4:	95 23       	and	r25, r21
 dd6:	09 f0       	breq	.+2      	; 0xdda <__mulsf3+0x12>
 dd8:	a6 cf       	rjmp	.-180    	; 0xd26 <__fp_inf>
 dda:	ab cf       	rjmp	.-170    	; 0xd32 <__fp_nan>
 ddc:	11 24       	eor	r1, r1
 dde:	ee cf       	rjmp	.-36     	; 0xdbc <__fp_szero>

00000de0 <__mulsf3x>:
 de0:	ca df       	rcall	.-108    	; 0xd76 <__fp_split3>
 de2:	a0 f3       	brcs	.-24     	; 0xdcc <__mulsf3+0x4>

00000de4 <__mulsf3_pse>:
 de4:	95 9f       	mul	r25, r21
 de6:	d1 f3       	breq	.-12     	; 0xddc <__mulsf3+0x14>
 de8:	95 0f       	add	r25, r21
 dea:	50 e0       	ldi	r21, 0x00	; 0
 dec:	55 1f       	adc	r21, r21
 dee:	62 9f       	mul	r22, r18
 df0:	f0 01       	movw	r30, r0
 df2:	72 9f       	mul	r23, r18
 df4:	bb 27       	eor	r27, r27
 df6:	f0 0d       	add	r31, r0
 df8:	b1 1d       	adc	r27, r1
 dfa:	63 9f       	mul	r22, r19
 dfc:	aa 27       	eor	r26, r26
 dfe:	f0 0d       	add	r31, r0
 e00:	b1 1d       	adc	r27, r1
 e02:	aa 1f       	adc	r26, r26
 e04:	64 9f       	mul	r22, r20
 e06:	66 27       	eor	r22, r22
 e08:	b0 0d       	add	r27, r0
 e0a:	a1 1d       	adc	r26, r1
 e0c:	66 1f       	adc	r22, r22
 e0e:	82 9f       	mul	r24, r18
 e10:	22 27       	eor	r18, r18
 e12:	b0 0d       	add	r27, r0
 e14:	a1 1d       	adc	r26, r1
 e16:	62 1f       	adc	r22, r18
 e18:	73 9f       	mul	r23, r19
 e1a:	b0 0d       	add	r27, r0
 e1c:	a1 1d       	adc	r26, r1
 e1e:	62 1f       	adc	r22, r18
 e20:	83 9f       	mul	r24, r19
 e22:	a0 0d       	add	r26, r0
 e24:	61 1d       	adc	r22, r1
 e26:	22 1f       	adc	r18, r18
 e28:	74 9f       	mul	r23, r20
 e2a:	33 27       	eor	r19, r19
 e2c:	a0 0d       	add	r26, r0
 e2e:	61 1d       	adc	r22, r1
 e30:	23 1f       	adc	r18, r19
 e32:	84 9f       	mul	r24, r20
 e34:	60 0d       	add	r22, r0
 e36:	21 1d       	adc	r18, r1
 e38:	82 2f       	mov	r24, r18
 e3a:	76 2f       	mov	r23, r22
 e3c:	6a 2f       	mov	r22, r26
 e3e:	11 24       	eor	r1, r1
 e40:	9f 57       	subi	r25, 0x7F	; 127
 e42:	50 40       	sbci	r21, 0x00	; 0
 e44:	8a f0       	brmi	.+34     	; 0xe68 <__mulsf3_pse+0x84>
 e46:	e1 f0       	breq	.+56     	; 0xe80 <__mulsf3_pse+0x9c>
 e48:	88 23       	and	r24, r24
 e4a:	4a f0       	brmi	.+18     	; 0xe5e <__mulsf3_pse+0x7a>
 e4c:	ee 0f       	add	r30, r30
 e4e:	ff 1f       	adc	r31, r31
 e50:	bb 1f       	adc	r27, r27
 e52:	66 1f       	adc	r22, r22
 e54:	77 1f       	adc	r23, r23
 e56:	88 1f       	adc	r24, r24
 e58:	91 50       	subi	r25, 0x01	; 1
 e5a:	50 40       	sbci	r21, 0x00	; 0
 e5c:	a9 f7       	brne	.-22     	; 0xe48 <__mulsf3_pse+0x64>
 e5e:	9e 3f       	cpi	r25, 0xFE	; 254
 e60:	51 05       	cpc	r21, r1
 e62:	70 f0       	brcs	.+28     	; 0xe80 <__mulsf3_pse+0x9c>
 e64:	60 cf       	rjmp	.-320    	; 0xd26 <__fp_inf>
 e66:	aa cf       	rjmp	.-172    	; 0xdbc <__fp_szero>
 e68:	5f 3f       	cpi	r21, 0xFF	; 255
 e6a:	ec f3       	brlt	.-6      	; 0xe66 <__mulsf3_pse+0x82>
 e6c:	98 3e       	cpi	r25, 0xE8	; 232
 e6e:	dc f3       	brlt	.-10     	; 0xe66 <__mulsf3_pse+0x82>
 e70:	86 95       	lsr	r24
 e72:	77 95       	ror	r23
 e74:	67 95       	ror	r22
 e76:	b7 95       	ror	r27
 e78:	f7 95       	ror	r31
 e7a:	e7 95       	ror	r30
 e7c:	9f 5f       	subi	r25, 0xFF	; 255
 e7e:	c1 f7       	brne	.-16     	; 0xe70 <__mulsf3_pse+0x8c>
 e80:	fe 2b       	or	r31, r30
 e82:	88 0f       	add	r24, r24
 e84:	91 1d       	adc	r25, r1
 e86:	96 95       	lsr	r25
 e88:	87 95       	ror	r24
 e8a:	97 f9       	bld	r25, 7
 e8c:	08 95       	ret

00000e8e <__mulsi3>:
 e8e:	62 9f       	mul	r22, r18
 e90:	d0 01       	movw	r26, r0
 e92:	73 9f       	mul	r23, r19
 e94:	f0 01       	movw	r30, r0
 e96:	82 9f       	mul	r24, r18
 e98:	e0 0d       	add	r30, r0
 e9a:	f1 1d       	adc	r31, r1
 e9c:	64 9f       	mul	r22, r20
 e9e:	e0 0d       	add	r30, r0
 ea0:	f1 1d       	adc	r31, r1
 ea2:	92 9f       	mul	r25, r18
 ea4:	f0 0d       	add	r31, r0
 ea6:	83 9f       	mul	r24, r19
 ea8:	f0 0d       	add	r31, r0
 eaa:	74 9f       	mul	r23, r20
 eac:	f0 0d       	add	r31, r0
 eae:	65 9f       	mul	r22, r21
 eb0:	f0 0d       	add	r31, r0
 eb2:	99 27       	eor	r25, r25
 eb4:	72 9f       	mul	r23, r18
 eb6:	b0 0d       	add	r27, r0
 eb8:	e1 1d       	adc	r30, r1
 eba:	f9 1f       	adc	r31, r25
 ebc:	63 9f       	mul	r22, r19
 ebe:	b0 0d       	add	r27, r0
 ec0:	e1 1d       	adc	r30, r1
 ec2:	f9 1f       	adc	r31, r25
 ec4:	bd 01       	movw	r22, r26
 ec6:	cf 01       	movw	r24, r30
 ec8:	11 24       	eor	r1, r1
 eca:	08 95       	ret

00000ecc <_exit>:
 ecc:	f8 94       	cli

00000ece <__stop_program>:
 ece:	ff cf       	rjmp	.-2      	; 0xece <__stop_program>
